{% extends 'base.j2' %}
{% block js %}
<script>
  // ---- Helpers -------------------------------------------------------------
  function buildAjaxConfig(url) {
    return {
      url,
      type: 'GET',
      // CRITICAL: Forward all DataTables params (including SearchPanes params)
      data: function(d) { return d; },
      dataSrc: function (json) {
        if (!json) return [];
        if (Array.isArray(json.data)) return json.data;   // DT SSP
        if (Array.isArray(json.items)) return json.items; // alt
        if (Array.isArray(json.results)) return json.results;
        if (Array.isArray(json)) return json;
        return [];
      }
    };
  }

  // Get a DataTable instance regardless of jQuery / vanilla build
  function getDTInstance(el) {
    if (window.jQuery && $.fn && $.fn.dataTable) {
      if ($.fn.dataTable.isDataTable(el)) return $(el).DataTable();
      return null;
    }
    if (window.DataTable) {
      try {
        // In DT2 vanilla this returns the existing instance if already initialised
        const dt = DataTable(el);
        // Guard: only treat as instance if initialised
        if (dt && typeof dt.draw === 'function') return dt;
      } catch (e) { /* not initialised yet */ }
    }
    return null;
  }

  {% if 'responsive_addon' in content['all_layout'] %}
    {% for table_id, addon in content['all_layout']['responsive_addon'].items() %}
      {% set is_ssp = 'ajax' in addon.get('type') or 'server_side' in addon.get('type') %}

      {% if addon.get('data') %}
        const tableData_{{ table_id }} = {{ addon['data'] | safe }};
      {% endif %}

      (function initDT_{{ table_id }}() {
        {% set all_indices = range(0, addon['ajax_columns']|length) %}
        {% set pane_indices = addon.get('columns') if addon.get('columns') is not none else all_indices|list %}
        {% set non_pane_indices = [] %}
        {% for i in all_indices %}
          {% if i not in pane_indices %}
            {% set _ = non_pane_indices.append(i) %}
          {% endif %}
        {% endfor %}

        const tableSelector = '#{{addon.get('type')}}_{{ table_id }}';

        // Build SearchPanes config once
        const panesConfig_{{ table_id }} = {
          cascadePanes: true,
          columns: {{ pane_indices|list }},
          {% if is_ssp %}
          viewTotal: true,
          dtOpts: { paging: false, searching: false }
          {% endif %}
        };

        const opts_{{ table_id }} = {
          {% if addon.get('data') and not is_ssp %}
          data: tableData_{{ table_id }},
          {% endif %}

          {% if is_ssp %}
          serverSide: true,
          processing: true,
          ajax: buildAjaxConfig("{{ addon.get('api') | url_for_with_params(addon.get('api_params')) }}"),
          {% endif %}

          // Scroller and SSP both require paging enabled
          paging: true,

          columns: [
            {% for column in addon['ajax_columns'] %}
              { data: '{{ column["data"] }}', defaultContent: '' },
            {% endfor %}
          ],

          columnDefs: [
            {
              targets: {{ pane_indices|list }},
              render: function (data, type, row, meta) {
                if (data == null) return '';

                // For SearchPanes (type === 'sp'), strip HTML and normalize
                if (type === 'sp') {
                  if (Array.isArray(data)) data = data.join(',');
                  else if (typeof data !== 'string') data = String(data);
                  return data
                    .replace(/<\/?[^>]+(>|$)/g, '')
                    .replace(/(<br\s*\/?>)/gi, '')
                    .normalize('NFKD')
                    .replace(/[^\x00-\x7F]/g, '')
                    .split(',')
                    .map(item => item.trim());
                }
                
                // For display, return data as-is (server sends HTML badges)
                return data;
              },
              searchPanes: { orthogonal: 'sp' }
            }
            {% if non_pane_indices %}
            ,{ searchPanes: { show: false }, targets: {{ non_pane_indices }} }
            {% endif %}
          ],

          stateSave: true,

          // DT2: explicitly place SearchPanes in the layout so it appears
          layout: {
            topStart: [
              { searchPanes: {% if addon.get("columns") %} panesConfig_{{ table_id }} {% else %} panesConfig_{{ table_id }} {% endif %} }
            ]
          }

          {% if addon.get("order") %},
          order: {{ addon["order"] | tojson }}
          {% endif %}
          {% if addon.get("pageLength") %},
          pageLength: {{ addon["pageLength"] }}
          {% endif %}
        };

        // If you actually use Scroller elsewhere, ensure the flags are coherent
        {% if addon.get('scroller') %}
        opts_{{ table_id }}.scroller = true;
        opts_{{ table_id }}.deferRender = true;
        {% endif %}

        initializeDataTable(tableSelector, opts_{{ table_id }}, {{ 'true' if is_ssp else 'false' }});
      })();
    {% endfor %}
  {% endif %}

  // ---- Tab redraw: safe for jQuery and vanilla builds ----------------------
  document.addEventListener('DOMContentLoaded', function () {
    const tabTriggers = document.querySelectorAll('[data-bs-toggle="tab"]');
    tabTriggers.forEach(function (tabTrigger) {
      tabTrigger.addEventListener('shown.bs.tab', function (event) {
        const targetId = event.target.getAttribute('href');
        if (!targetId) return;
        const targetPane = document.querySelector(targetId);
        if (!targetPane) return;

        // Small delay to ensure tab is fully visible
        setTimeout(function() {
          const tables = targetPane.querySelectorAll('table.dataTable, table.dt-table');
          tables.forEach(function (table) {
            const dt = getDTInstance(table);
            if (dt) {
              // Adjust column widths
              if (dt.columns && typeof dt.columns().adjust === 'function') {
                dt.columns().adjust();
              }
              
              // Force SearchPanes to recalculate by destroying and rebuilding
              if (dt.searchPanes) {
                try {
                  // Try different methods to rebuild SearchPanes
                  if (typeof dt.searchPanes.rebuild === 'function') {
                    dt.searchPanes.rebuild();
                  } else if (typeof dt.searchPanes.rebuildPane === 'function') {
                    dt.searchPanes.rebuildPane();
                  } else {
                    // Force a full redraw which should trigger SearchPanes resize
                    dt.draw();
                  }
                } catch (e) {
                  console.log('SearchPanes rebuild failed, trying draw:', e);
                  dt.draw();
                }
              } else {
                // No searchPanes API, just redraw
                dt.draw(false);
              }
            }
          });
          
          // Also trigger a window resize event which some DataTables plugins listen to
          window.dispatchEvent(new Event('resize'));
        }, 50);
      });
    });
  });
</script>
{% endblock %}



{% block title %}
{% if content["title"]%}
    {{content["title"]}}
{% endif %}
{% endblock %}

{% block main_page %}

{% if history is not defined %}
    {% set history = None %}
{% endif %}

{% set submenu_count = namespace(value=0) %}
{% set path_count = namespace(value=0) %}

{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      {% set bs = category if category in ['primary','secondary','success','danger','warning','info','light','dark'] else 'secondary' %}
      <div class="alert alert-{{ bs }} alert-dismissible fade show mt-2" role="alert">
        {{ message }}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    {% endfor %}
  {% endif %}
{% endwith %}

<script>
  document.querySelectorAll('.alert').forEach(a=>{
    setTimeout(()=>{ a.classList.remove('show'); a.addEventListener('transitionend',()=>a.remove()); }, 3500);
  });
</script>

{% if content|length <= 3 %}
    <div class="text-center">
        <img src="{{ url_for('static', filename= 'images/status/unauthorized.svg')}}" width="500vw">
        <h1 class="error-title">Unauthorized</h1>
        <p class="fs-5 text-gray-600">There is no tools that you are authorized to use in this section</p>
    </div>
{% else %}
    {% for modal in content["modals"] %}
    <div class="modal fade" id="{{modal["id"]}}" tabindex="-1" aria-labelledby="Coucou" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-dialog-scrollable modal-full" role="document">
            <div class="modal-content">
                {% if "header" in modal %}
                <div class="modal-header">
                  <h5 class="modal-title">{{ modal["header"] }}</h5>
                </div>
                {% endif %}
                <div class="modal-body">
                {% for module in modal["content"] %}
                    {% if module != "modals" %}
                        {% for layout in modal["content"][module]["layouts"] %}

                            {% if layout["subtitle"] and layout["type"] != "SPACER" %}
                                <h3 class="text-primary mt-5">{{layout["subtitle"]}}</h3>
                            {% endif %}

                            {% if layout["type"] == "VERT" %}
                                {{ disp_layouts.display_vertical_layout(layout["columns"], layout["containers"], layout["align"]) }}
                            {% elif layout["type"] == "TABLE" %}
                                {{ disp_layouts.display_table_layout(layout["header"], layout["lines"]) }}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}

    {% for module in content %}
        {% if module != "modals" and module != "all_layout" and module != "breadcrumbs" and module != "title" and module != "required_css" and module != "required_js" and module != "required_cdn" and module != "required_css_cdn" %}
            <div class="card">
                <div class="card-header py-1"></div>

                <div class="card-body">
                    {% if content[module]["display"] %}
                        {% if "name_override" in content[module] %}
                        <h1>{{ content[module]["name_override"] }}</h1>
                        {% else %}
                        <h1>{{ module }}</h1>
                        {% endif %}
                    {% endif %}

                    {% if "error" in content[module] and content[module]["error"] %}
                        <div class="text-center">
                            <img src="{{ url_for('static', filename='images/site/500.png')}}" style="width: 500px; max-width: 100%;">
                            <h3 class="error-title mt-3">This page can't be displayed with the current configuration</h3>
                            <p class="fs-5 text-gray-600">{{content[module]["error"]}}</p>
                        </div>
                    {% elif "access_denied" in content[module] and content[module]["access_denied"] %}
                        <div class="text-center">
                            <img src="{{ url_for('static', filename='images/site/unauthorized.png')}}" style="width: 500px; max-width: 100%;">
                            <div class="alert alert-light-danger color-danger"><i class="mdi mdi-close-octagon"></i>Access Denied</div>
                            <p class="fs-5 text-gray-600">
                                {% if "denied_reason" in content[module] and content[module]["denied_reason"] %}
                                    {{content[module]["denied_reason"]}}
                                {% else %}
                                    {% if "required_permission" in content[module] and content[module]["required_permission"] %}
                                      <p class="text-muted">
                                          <small>
                                              Required: '{{ content[module]["required_action"] }}' permission for '{{ content[module]["required_permission"] }}' module
                                          </small>
                                      </p>
                                  {% endif %}
                                {% endif %}
                            </p>
                        </div>
                    {% else %}

                        {% if target %}
                            <form action="{{ url_for(target) }}" method="POST" enctype="multipart/form-data">
                            <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                        {% endif %}

                        {% for layout in content[module]["layouts"] %}
                            {% if layout["subtitle"] and layout["type"] != "SPACER" %}
                                <h3 class="text-primary mt-5">{{layout["subtitle"]}}</h3>
                            {% endif %}
                            {{ disp_layouts.display_layout(layout) }}
                        {% endfor %}

                        {% if target %}
                            </form>
                        {% endif %}

                    </div>

                    {% if content[module]["type"] == "threaded_action" or content[module]["type"] == "workflow" %}
                        <div class="card-footer alert-light-secondary theme-aware">
                            <h4 class="theme-text">Action progress</h4>
                            <div class="table-responsive">
                                <table class="table-light table-striped mb-0 theme-aware" id="{{module | replace(' ', '_')}}_result">
                                    <thead>
                                        <tr>
                                            <th style="width: 50%;">Task</th>
                                            <th style="width: 50%;">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div id="{{module | replace(' ', '_')}}_progress"></div>
                        </div>
                    {% endif %}
                {% endif %}
            </div>
        {% endif %}
    {% endfor %}
{% endif %}

{% if thread_monitor_js %}
<script src="{{ url_for('static', filename='js/thread_monitor.js') }}"></script>
{% endif %}

{% endblock %}
