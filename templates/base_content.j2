{% extends 'base.j2' %}

{% block js %}
<style>
/* Par défaut (fallback) */
html:not([data-bs-theme="light"]):not([data-bs-theme="dark"]) .theme-aware {
    background-color: #e9edf4; /* Couleur claire par défaut */
    color: #4a4a4a; /* Texte gris foncé */
}

html:not([data-bs-theme="light"]):not([data-bs-theme="dark"]) .alert-light-secondary {
    background-color: #e4eaf0; /* Couleur claire par défaut */
    color: #376a84; /* Texte bleu-vert */
    border: 1px solid #dde2e8; /* Bordure claire */
}

html:not([data-bs-theme="light"]):not([data-bs-theme="dark"]) .bg-light-secondary {
    background-color: #e4eaf0; /* Couleur claire par défaut */
    color: #376a84; /* Texte bleu-vert */
    border: 1px solid #dde2e8; /* Bordure claire */
}

/* Light theme styles */
html[data-bs-theme="light"] .theme-aware {
    background-color: #e4eaf0; /* Couleur claire pour le thème light */
    color: #4a4a4a; /* Texte gris foncé */
}

html[data-bs-theme="light"] .alert-light-secondary {
    background-color: #e4eaf0; /* Couleur claire pour le thème light */
    color: #376a84; /* Texte bleu-vert */
    border: 1px solid #dde2e8; /* Bordure claire */
}

html[data-bs-theme="light"] .bg-light-secondary {
    background-color: #e4eaf0; /* Couleur claire pour le thème light */
    color: #376a84; /* Texte bleu-vert */
    border: 1px solid #dde2e8; /* Bordure claire */
}

/* Dark theme styles */
html[data-bs-theme="dark"] .theme-aware {
    background-color: #2b3a42; /* Couleur sombre pour le thème dark */
    color: #c2c2d9; /* Texte blanc */
}

html[data-bs-theme="dark"] .alert-light-secondary {
    background-color: #2b3a42; /* Couleur sombre pour le thème dark */
    color: #c2c2d9; /* Texte clair */
    border: 1px solid #1e1e2d; /* Bordure bleu foncé */
}

html[data-bs-theme="dark"] .bg-light-secondary {
    background-color: #2b3a42; /* Couleur sombre pour le thème dark */
    color: #c2c2d9; /* Texte clair */
    border: 1px solid #1e1e2d; /* Bordure bleu foncé */
}

/* Par défaut pour les tables */
html:not([data-bs-theme="light"]):not([data-bs-theme="dark"]) .theme-aware table {
    width: 100%;
    border-collapse: collapse;
    color: #4a4a4a;
}

/* Light Theme pour les tables */
html[data-bs-theme="light"] .theme-aware table {
    width: 100%;
    border-collapse: collapse;
    color: #4a4a4a;
}

/* Dark Theme pour les tables */
html[data-bs-theme="dark"] .theme-aware table {
    width: 100%;
    border-collapse: collapse;
    color: rgb(180, 180, 216);
}

/* Styles généraux */
.theme-aware table th,
.theme-aware table td {
    text-align: left;
    padding: 8px;
}

.theme-aware table th {
    font-weight: bold;
    border-bottom: 1px solid var(--theme-border-color);
    padding-bottom: 8px;
}

/* Variables pour les bordures */
html:not([data-bs-theme="light"]):not([data-bs-theme="dark"]) {
    --theme-border-color: #b3b3b3; /* Gris moyen */
}

html[data-bs-theme="light"] {
    --theme-border-color: #b3b3b3; /* Gris moyen */
}

html[data-bs-theme="dark"] {
    --theme-border-color: #1e1e2d; /* Bleu foncé */
}
</style>

<script>
    // Function to create common buttons
    function getCommonButtons(checkAll, elementId) {
        return [
            {
                text: checkAll ? 'Check All' : 'Check All',
                action: function (e, dt, node, config) {
                    const isChecked = $(node).text() === 'Check All';
                    const checkboxes = dt.table().node().querySelectorAll(`input[type="checkbox"]`);
                    checkboxes.forEach(checkbox => checkbox.checked = isChecked);
                    $(node).text(isChecked ? 'Uncheck All' : 'Check All');
                }
            },
            {
                text: 'Export',
                action: function () {},
                split: ['pdf', 'excel', 'print', 'copy']
            },
            {
                text: 'View',
                action: function () {},
                split: [
                    { text: 'Show 10 items', action: (e, dt) => dt.page.len(10).draw() },
                    { text: 'Show 25 items', action: (e, dt) => dt.page.len(25).draw() },
                    { text: 'Show 50 items', action: (e, dt) => dt.page.len(50).draw() },
                    { text: 'Show 100 items', action: (e, dt) => dt.page.len(100).draw() }
                ]
            }
        ];
    }

    function initializeDataTable(selector, customOptions, ajax) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
            const tableId = element.id;
            const tableOptions = {
                colReorder: true,
                buttons: getCommonButtons(selector.includes('advanced'), tableId),
                dom: 'BPlfrtip',
                pageLength: 25
            };
            const finalOptions = { ...tableOptions, ...customOptions };
            const table = new DataTable(`#${tableId}`, finalOptions);
            if (ajax) {
                setInterval(function () {
                    fetch('/status/logs_api')
                        .then(response => response.json())
                        .then(newData => {
                            table.clear();
                            table.rows.add(newData);
                            table.draw(false);
                            if (table.searchPanes) {
                                table.searchPanes.rebuildPane();
                            }
                        });
                }, 3000);
            }
        });
    }

    // Basic Table Initialization

    {% if 'responsive_addon' in content['all_layout'] %}
        {% for table_id, addon in content['all_layout']['responsive_addon'].items() %}
            {% if addon.get('data') %}
                const tableData_{{ table_id }} = {{ addon['data'] | safe }};
            {% endif %}
            initializeDataTable('#{{addon.get('type')}}_{{ table_id }}', {
                {% if addon.get('data') %}
                data: tableData_{{ table_id }},
                {% endif %}

                {% if 'ajax' in addon.get('type') %}
                    ajax: {
                        url: '{{url_for(addon.get('api'))}}',
                        dataSrc: ''
                    },
                {% endif %}

                {% if 'advanced' in addon.get('type') or 'ajax' in addon.get('type') %}
                    {% set all_indices = range(0, addon['ajax_columns']|length) %}
                    {% set pane_indices = addon.get('columns') if addon.get('columns') is not none else range(0, addon['ajax_columns']|length) %}
                    {% set non_pane_indices = [] %}
                    {% for i in all_indices %}
                        {% if i not in pane_indices %}
                            {% set _ = non_pane_indices.append(i) %}
                        {% endif %}
                    {% endfor %}

                    columns: [
                        {% for column in addon['ajax_columns'] %}
                            { data: '{{ column["data"] }}', defaultContent: '' },
                        {% endfor %}
                    ],
                    columnDefs: [
                        {
                            targets: {{ addon['columns'] }},
                            render: function (data, type) {
                                if (!data) return '';
                                if (type === 'sp') {
                                    if (Array.isArray(data)) data = data.join(',');
                                    else if (typeof data !== 'string') data = String(data);
                                    return data
                                        .replace(/<\/?[^>]+(>|$)/g, '')
                                        .replace(/(<br\s*\/?>)/gi, '')
                                        .normalize('NFKD')
                                        .replace(/[^\x00-\x7F]/g, '')
                                        .split(',')
                                        .map(item => item.trim());
                                }
                                return data;
                            },
                            searchPanes: { orthogonal: 'sp' }
                        },
                        {
                            searchPanes: { show: false },
                            targets: {{ non_pane_indices }}
                        },
                    ],
                    stateSave: true,
                    searchPanes: {
                        cascadePanes: true,
                        {% if addon.get("columns") %}
                        columns: {{ addon["columns"] }}
                        {% endif %}
                    }
                {% endif %}
            }, {%if 'ajax' in addon.get('type') %} true {% else %} false {%endif%});
        {% endfor %}
    {% endif %}
</script>


{% endblock %}

{% block title %}
{% if content["title"]%}
    {{content["title"]}}
{% endif %}
{% endblock %}

{% block main_page %}

{% if history is not defined %}
    {% set history = None %}
{% endif %}

{% set submenu_count = namespace(value=0) %}
{% set path_count = namespace(value=0) %}

{%if content|length <= 3 %} 
    {# This is size of 1 because the modals are always here #}
    <div class="text-center">
        <img src="{{ url_for('static', filename= 'images/status/unauthorized.svg')}}" width="500vw">
        <h1 class="error-title">Unauthorized</h1>
        <p class="fs-5 text-gray-600">There is no tools that you are authorized to use in this section</p>
    </div>
{% else %}
    {# Start with the modals #}
    {% for modal in content["modals"] %}
    <div class="modal fade" id="{{modal["id"]}}" tabindex="-1" aria-labelledby="Coucou" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-dialog-scrollable modal-full" role="document">
            <div class="modal-content">
                {% if "header" in modal %}
                <div class="modal-header">
                <h5 class="modal-title">{{ modal["header"] }}</h5>
                </div>
                {% endif %}
                <div class="modal-body">
                {# Each module is displayed in its block #}
                {% for module in modal["content"] %}
                    {% if module != "modals" %}
                        {# Module layouts #}
                        {% for layout in modal["content"][module]["layouts"] %}

                            {# Subtitle #}
                            {% if layout["subtitle"] and layout["type"] != "SPACER" %}
                                <h3 class="text-primary mt-5">{{layout["subtitle"]}}</h3>
                            {% endif %}

                            {# Content #}
                            {% if layout["type"] == "VERT" %}
                                {{ disp_layouts.display_vertical_layout(layout["columns"], layout["containers"], layout["align"]) }}
                            {% elif layout["type"] == "TABLE" %}
                                {{ disp_layouts.display_table_layout(layout["header"], layout["lines"]) }}
                            {% endif %}
                        {% endfor%}
                    {% endif %}
                {% endfor%}
            </div>
            </div>
        </div>
    </div>
    {% endfor %}

    {# Each module is displayed in its block #}
    {% for module in content %}
        
        {% if module != "modals" and module != "all_layout" and module != "breadcrumbs" and module != "title" %}
            <div class="card">
                {# Possibility to add a header to the card #}
                <div class="card-header py-1">
                </div>

                {# Module content #}
                <div class="card-body">
                    {% if content[module]["display"] %}
                        {% if "name_override" in content[module] %}
                        <h1>{{ content[module]["name_override"] }}</h1>
                        {% else %}
                        <h1>{{ module }}</h1>
                        {% endif %}
                    {% endif %}

                    {% if "error" in content[module] and content[module]["error"]%}
                        <div class="text-center">
                            <img src="{{ url_for('static', filename='images/status/error.svg')}}" style="width: 500px; max-width: 100%;">
                            <h3 class="error-title mt-3">This page can't be displayed with the current configuration</h3>
                            <p class="fs-5 text-gray-600">{{content[module]["error"]}}</p>
                        </div>
                    {% else %}

                        {# Form information #}
                        {% if target %}
                            <form action="{{ url_for(target) }}" method="POST" enctype="multipart/form-data" onkeydown="return event.key !== 'Enter'">
                            <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                        {% endif %}
                        {# Module layouts #}
                        {% for layout in content[module]["layouts"] %}

                            {# Subtitle #}
                            {% if layout["subtitle"] and layout["type"] != "SPACER" %}
                                <h3 class="text-primary mt-5">{{layout["subtitle"]}}</h3>
                            {% endif %}

                            {# Content #}
                            {{ disp_layouts.display_layout(layout) }}
                        {% endfor%}

                        {% if target %}
                        </form>
                        {% endif %}

                    </div>

                    {# Module footer #}
                    {% if content[module]["type"] == "threaded_action" or content[module]["type"] == "worfklow" %}
                        <div class="card-footer alert-light-secondary theme-aware">
                            <h4 class="theme-text">Action progress</h4>
                            <div class="table-responsive">
                                <table class="table-light table-striped mb-0 theme-aware" id="{{module}}_result">
                                    <thead>
                                        <tr>
                                            <th style="width: 50%;">Task</th> <!-- Largeur explicite pour équilibrer -->
                                            <th style="width: 50%;">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Vos lignes ici -->
                                    </tbody>
                                </table>
                            </div>
                            <div id="progress_result"></div>
                        </div>
                    {% endif %}
                {% endif %}
            </div>
        {% endif %}
    {% endfor%}
{% endif %}
{% endblock %}