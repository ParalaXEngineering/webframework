<script>
    // Tableau pour stocker les touches du Konami Code
    const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
    let konamiIndex = 0;

    // √âtat pour savoir si l'animation est active
    let animationActive = sessionStorage.getItem('konamiActivated') === 'true';

    if (animationActive) {
        console.log("Animation d√©j√† activ√©e dans cette session.");
        activateThemeForCurrentMonth(); // Continue l'animation si d√©j√† activ√©e
    }

    // √âcoute des touches clavier
    document.addEventListener('keydown', (event) => {
        if (event.key === konamiCode[konamiIndex]) {
            konamiIndex++; // Passe √† la prochaine touche
            if (konamiIndex === konamiCode.length) {
                // Konami Code valid√©
                konamiCodeActivated();
                konamiIndex = 0; // R√©initialise le compteur
            }
        } else {
            konamiIndex = 0; // R√©initialise si la s√©quence est bris√©e
        }
    });

    function konamiCodeActivated() {
        console.log("Konami Code activ√© !");
        // Marquer le Konami Code comme activ√© pour cette session
        sessionStorage.setItem('konamiActivated', 'true');
        animationActive = true;
        // D√©clencher le th√®me bas√© sur le mois
        activateThemeForCurrentMonth();
    }

    function activateThemeForCurrentMonth() {
        const month = new Date().getMonth() + 1; // Les mois commencent √† 0 en JavaScript
        let theme = 'default'; // Th√®me par d√©faut
        let imageFilename = ''; // Nom de l'image

        // D√©terminer le th√®me en fonction du mois
        if (month === 12 || month === 1) {
            theme = 'winter';
            imageFilename = 'winter.jpg';
        } else if (month === 4 || month === 5) {
            theme = 'easter';
            imageFilename = 'easter.jpg';
        } else if (month === 10 || month === 11) {
            theme = 'autumn';
            imageFilename = 'autumn.jpg';
        } else if (month >= 6 && month <= 8) {
            theme = 'summer';
            imageFilename = 'summer.jpg';
        } else if (month == 2 || month == 3) {
            theme = 'carnival';
            imageFilename = 'carnival.jpg';
        } else if (month == 9) {
            theme = 'harvest';
            imageFilename = 'harvest.jpg';
        }

        // Ajouter l'image saisonni√®re et les flocons
        addSeasonalImage(imageFilename);
        startSnowflakes(theme);
    }

    function addSeasonalImage(imageFilename) {

        // Ajouter l'image
        const seasonalImage = document.getElementById('home_image');
        if (!seasonalImage) {
            console.warn("Warning : l'√©l√©ment #home_image n'existe pas.");
            return;
        }
        seasonalImage.src = "{{ url_for('static', filename='images/site/') }}" + imageFilename;
    }

    function startSnowflakes(theme) {
        // Fonction pour cr√©er un flocon
        function createSnowflake(theme) {
            const snowflake = document.createElement('div');
            snowflake.classList.add('snowflake');

            // Choisir les emojis selon le th√®me
            let emojis = [];
            switch (theme) {
                case 'easter': // P√¢ques
                    emojis = ['ü•ö', 'üê£', 'üê∞', 'üå∏'];
                    break;
                case 'autumn': // Automne
                    emojis = ['üçÇ', 'üçÅ', 'üå∞', 'üéÉ'];
                    break;
                case 'summer': // √ât√©
                    emojis = ['‚òÄÔ∏è', 'üèñÔ∏è', 'üçâ', 'üå¥', 'ü¶Ä', 'üåä'];
                    break;
                case 'carnival': // Carnaval
                    emojis = ['üé≠', 'üéâ', 'ü§π‚Äç‚ôÇÔ∏è', 'üé∫', 'üé°'];
                    break;
                case 'harvest': // F√™te des moissons
                    emojis = ['üåΩ', 'üåæ', 'üçá', 'ü•ñ', 'üç∑'];
                    break;
                default: // Hiver par d√©faut
                    emojis = ['‚ùÑ'];
                    break;
            }

            // S√©lection al√©atoire de l'emoji
            snowflake.textContent = emojis[Math.floor(Math.random() * emojis.length)];

            // Position al√©atoire
            snowflake.style.left = Math.random() * window.innerWidth + 'px';

            // Taille al√©atoire
            const size = Math.random() * 20 + 10; // Entre 10px et 30px
            snowflake.style.fontSize = size + 'px';

            // Dur√©e d'animation al√©atoire
            const duration = Math.random() * 5 + 3; // Entre 3s et 8s
            snowflake.style.animationDuration = duration + 's';

            // Opacit√© al√©atoire
            snowflake.style.opacity = Math.random();

            // Ajouter √† la page
            document.body.appendChild(snowflake);

            // Supprimer apr√®s l'animation
            setTimeout(() => {
                snowflake.remove();
            }, duration * 1000);
        }

        setInterval(() => createSnowflake(theme), 200);
    }
</script>

<script>
  // Utilise url_for pour ne pas te tromper d‚ÄôURL (blueprint/prefix)
  const RUN_TREX_URL = "{{ url_for('singles.run_trex_game') if url_for else '/run-trex-game' }}";

  // S√©quence clavier "trex"
  const trexCode = ['t','r','e','x'];
  let trexIndex = 0;

  document.addEventListener('keydown', (event) => {
    if (event.key.toLowerCase() === trexCode[trexIndex]) {
      trexIndex++;
      if (trexIndex === trexCode.length) {
        launchTrexGame();
        trexIndex = 0;
      }
    } else {
      trexIndex = 0;
    }
  });

  async function launchTrexGame() {
    try {
      const res = await fetch(RUN_TREX_URL, {
        method: "POST",
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest",
          // Si tu utilises Flask-WTF CSRF, d√©commente la ligne suivante et fournis le token depuis un meta
          // "X-CSRFToken": document.querySelector('meta[name="csrf-token"]')?.content || ""
        },
        body: "{}"
      });

      const ct = res.headers.get("content-type") || "";
      const raw = await res.text();

      if (!ct.includes("application/json")) {
        // R√©ponse HTML ‚Üí souvent un redirect vers login ou une erreur serveur
        throw new Error(`R√©ponse non-JSON (status ${res.status}). D√©but: ${raw.slice(0, 120)}`);
      }

      const data = JSON.parse(raw);

      if (res.ok && data.status === "success") {
        showCustomAlert(
            'üéÆ Jeu du T-Rex lanc√©, Amuse-toi bien ü¶ñ ',
            "{{ url_for('static', filename='images/site/trex.jpg') }}"
        );
      } else {
        throw new Error(data.message || `Erreur serveur (status ${res.status})`);
      }
    } catch (err) {
      console.error(err);
      // Message propre si √ßa redevient du HTML
      alert("Erreur r√©seau: " + err.message);
    }
  }
</script>


<style>
    /* Effet Pixel Art - Th√®me Clair */
    html[data-bs-theme="light"] body.pixel-art-mode {
        image-rendering: pixelated;
        background-color: #fff; /* Fond blanc */
        color: #000; /* Texte noir */
        filter: contrast(200%) brightness(90%);
    }

    body.pixel-art-mode img {
        image-rendering: pixelated;
        transform-origin: center;
    }

    body.pixel-art-mode * {
        font-family: "Press Start 2P", monospace; /* Police r√©tro */
        box-shadow: none;
        border-radius: 0;
        text-transform: uppercase; /* Texte en majuscules pour un effet r√©tro */
        letter-spacing: 2px; /* Espacement des lettres */
    }

    /* Boutons et Formulaires - Th√®me Clair */
    html[data-bs-theme="light"] body.pixel-art-mode input,
    html[data-bs-theme="light"] body.pixel-art-mode select,
    html[data-bs-theme="light"] body.pixel-art-mode textarea {
        background-color: #ddd; /* Fond gris clair */
        color: #000; /* Texte noir */
        border: 2px solid #000; /* Bordures noires */
    }

    /* Effet Pixel Art - Th√®me Sombre */
    html[data-bs-theme="dark"] body.pixel-art-mode {
        image-rendering: pixelated;
        background-color: #000; /* Fond noir */
        color: #0f0; /* Texte vert */
        filter: contrast(150%) brightness(70%);
    }

    /* Boutons et Formulaires - Th√®me Sombre */
    html[data-bs-theme="dark"] body.pixel-art-mode input,
    html[data-bs-theme="dark"] body.pixel-art-mode select,
    html[data-bs-theme="dark"] body.pixel-art-mode textarea {
        background-color: #333; /* Fond gris fonc√© */
        color: #0f0; /* Texte vert */
        border: 2px solid #0f0; /* Bordures vertes */
    }

    /* Liens */
    html[data-bs-theme="light"] body.pixel-art-mode a {
        color: #0000ff; /* Liens bleus */
    }

    html[data-bs-theme="dark"] body.pixel-art-mode a {
        color: #00ffff; /* Liens cyan */
    }


    @keyframes fall {
        0% {
            transform: translateY(0) rotate(0deg);
        }
        100% {
            transform: translateY(100vh) rotate(360deg);
        }
    }

    .snowflake {
        position: fixed;
        top: -50px;
        z-index: 9999;
        pointer-events: none;
        color: white;
        opacity: 0.8;
        animation: fall linear infinite;
</style>

<script>
    let refreshAttempts = 0;  // Compteur de tentatives de rafra√Æchissement
    // D√©sactiver le rechargement et afficher l'alerte personnalis√©e
    document.addEventListener("keydown", function (event) {
        if ((event.ctrlKey && event.key === "r") || event.key === "F5" || event.keyCode === 116) {
            event.preventDefault();
            refreshAttempts++;
            if (refreshAttempts === 1) {
                showCustomAlert(
                    "Reloading the page is disabled.",
                    "{{ url_for('static', filename='images/site/norefresh.jpg') }}"
                );
            } else {
                triggerDeathScreen(event, "Reloading the page is disabled !");
                refreshAttempts = 0;
            }
        }
    });
</script>
 
<script>
document.addEventListener("DOMContentLoaded", () => {
    const PIXEL_MODE_KEY = "pixelArtMode";
    const BROL_MODE_KEY = "brolMode";
    const secretWord = "pixel";
    let typedKeys = [];

    const tagsToScramble = ['h1', 'h3', 'h4', 'h5', 'h6', 'input'];

    function shuffleCambridgeWord(word) {
        if (word.length <= 3) return word;
        const first = word[0];
        const last = word[word.length - 1];
        let middle = word.slice(1, -1).split('');
        for (let i = middle.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [middle[i], middle[j]] = [middle[j], middle[i]];
        }
        return first + middle.join('') + last;
    }

    function shuffleCambridgeString(str) {
        return str.replace(/\w+/g, shuffleCambridgeWord);
    }

    function shuffleString(str) {
        return shuffleCambridgeString(str);
    }

    function scrambleSelectedTags(scramble) {
        tagsToScramble.forEach(tag => {
            document.querySelectorAll(tag).forEach(el => {
                if (scramble) {
                    if (!el.dataset.originalText) el.dataset.originalText = el.textContent;
                    el.textContent = shuffleString(el.dataset.originalText);
                } else if (el.dataset.originalText) {
                    el.textContent = el.dataset.originalText;
                }
            });
        });
    }

    function scrambleLooseTextNodes(parent, scramble) {
        for (let node of parent.childNodes) {
            if (node.nodeType === Node.TEXT_NODE && node.textContent.trim().length > 0) {
                if (!tagsToScramble.includes(node.parentNode.tagName?.toLowerCase())) {
                    if (scramble) {
                        if (!node.parentNode.dataset['originalText']) node.parentNode.dataset['originalText'] = node.textContent;
                        node.textContent = shuffleString(node.parentNode.dataset['originalText']);
                    } else if (node.parentNode.dataset['originalText']) {
                        node.textContent = node.parentNode.dataset['originalText'];
                    }
                }
            } else if (node.nodeType === Node.ELEMENT_NODE) {
                scrambleLooseTextNodes(node, scramble);
            }
        }
    }

    function scrambleAllTexts(scramble) {
        scrambleSelectedTags(scramble);
        scrambleLooseTextNodes(document.body, scramble);
    }

    // Restaure les modes √† l'initialisation
    if (localStorage.getItem(PIXEL_MODE_KEY) === "true") {
        document.body.classList.add("pixel-art-mode");
    }
    if (localStorage.getItem(BROL_MODE_KEY) === "true") {
        document.body.classList.add("brol-mode");
        scrambleAllTexts(true);
    }

    document.addEventListener("keydown", (event) => {
        typedKeys.push(event.key.toLowerCase());
        typedKeys = typedKeys.slice(-secretWord.length);

        let pixelWord = (typedKeys.join("") === secretWord);
        let brolCombo = (event.ctrlKey && event.altKey && event.key.toLowerCase() === "b");

        // 1. Mode pixel-art
        if (pixelWord) {
            // D√©sactive brol mode si actif
            document.body.classList.remove("brol-mode");
            localStorage.setItem(BROL_MODE_KEY, "false");
            scrambleAllTexts(false);

            const isPixelActive = document.body.classList.toggle("pixel-art-mode");
            localStorage.setItem(PIXEL_MODE_KEY, isPixelActive.toString());
        }

        // 2. Mode brol (shuffle)
        if (brolCombo) {
            // D√©sactive pixel-art mode si actif
            document.body.classList.remove("pixel-art-mode");
            localStorage.setItem(PIXEL_MODE_KEY, "false");

            // Toggle brol mode (shuffle)
            const isBrolActive = document.body.classList.toggle("brol-mode");
            localStorage.setItem(BROL_MODE_KEY, isBrolActive.toString());
            scrambleAllTexts(isBrolActive);

            if (isBrolActive) {
                showCustomAlert(
                    '‚ú® Mode "Brol cod√© sur un coin de table" activ√© !',
                    "{{ url_for('static', filename='images/site/noob.jpg') }}"
                );
            }
        }
    });
});
</script>

{% block extra_css %}
<style>
    @keyframes deathFade {
        0% {
            opacity: 0;
            font-size: 10px;
        }
        50% {
            opacity: 1;
            font-size: 80px;
        }
        100% {
            opacity: 1;
            font-size: 120px; /* Taille finale du texte */
        }
    }

    @keyframes subTextFade {
        0% {
            opacity: 0;
            font-size: 5px;
        }
        50% {
            opacity: 1;
            font-size: 30px;
        }
        100% {
            opacity: 1;
            font-size: 50px; /* Taille finale du sous-texte */
        }
    }

    .death-screen {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        color: darkred;
        font-weight: bold;
        text-transform: uppercase;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        font-size: 10px; /* Taille initiale */
        transition: background-color 1s ease-in-out;
    }

    .show-death {
        display: flex !important;
        animation: deathFade 2s ease-out forwards;
    }

    @font-face {
        font-family: 'Optimus Princeps';
        src: url("{{ url_for('static', filename='fonts/OptimusPrinceps.ttf') }}") format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .death-screen {
        font-family: 'Optimus Princeps', serif;
        font-size: 10px;
        text-shadow: 2px 2px 10px black; /* Ajoute un effet dramatique */
    }

    /* Sous-texte (phrase plus petite, centr√© et grandissant) */
    .death-subtext {
        font-size: 5px; /* Taille initiale plus petite */
        margin-top: 10px; /* Espacement entre YOU DIED et le sous-texte */
        opacity: 0;
        text-transform: none; /* Garde la casse normale */
        font-weight: normal;
        font-style: italic;
        animation: subTextFade 2s ease-out forwards;
    }

    .death-text-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .death-text-wrapper {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center; /* Assure l'alignement du texte */
    }
</style>
{% endblock %}

{% block extra_js %}
<script>
    let typed = "";
    let targetPhrase = "YOU DIED";
    let audio = new Audio("{{ url_for('static', filename='sounds/site/you_died.mp3') }}");
    let deathTriggered = false;  // Pour √©viter le double d√©clenchement

    function triggerDeathScreen(event, phrase) {
        if (deathTriggered) return; // √âvite le double d√©clenchement
        deathTriggered = true;

        // Cr√©e l'√©l√©ment seulement s'il n'existe pas d√©j√†
        // Cr√©e l'√©l√©ment seulement s'il n'existe pas d√©j√†
        if (!document.querySelector(".death-screen")) {
            let deathScreen = document.createElement("div");
            deathScreen.classList.add("death-screen");

            // Conteneur pour centrer les textes
            let textContainer = document.createElement("div");
            textContainer.classList.add("death-text-container");

            // Sous-conteneur pour assurer l'alignement des deux textes
            let textWrapper = document.createElement("div");
            textWrapper.classList.add("death-text-wrapper");

            // Ajoute le texte principal
            let mainText = document.createElement("p");
            mainText.textContent = "YOU DIED";
            mainText.classList.add("death-text");

            textWrapper.appendChild(mainText);

            // Ajoute le sous-texte SEULEMENT s'il y en a un
            if (phrase) {
                let subText = document.createElement("p");
                subText.textContent = phrase;
                subText.classList.add("death-subtext");
                textWrapper.appendChild(subText);
            }

            // Assemble les √©l√©ments
            textContainer.appendChild(textWrapper);
            deathScreen.appendChild(textContainer);
            document.body.appendChild(deathScreen);
        }


        let deathScreen = document.querySelector(".death-screen");
        document.body.style.backgroundColor = "black";
        deathScreen.classList.add("show-death");

        audio.play(); // Joue le son

        setTimeout(() => {
            document.body.style.backgroundColor = "";
            deathScreen.remove();
            deathTriggered = false;  // R√©initialise pour autoriser un nouveau d√©clenchement
        }, 9000);
    }

    document.addEventListener("keydown", function(event) {
        typed += event.key.toUpperCase();
        if (typed.length > targetPhrase.length) {
            typed = typed.slice(1);
        }

        if (typed === targetPhrase) {
            triggerDeathScreen(event,"");
        }
    });

</script>
{% endblock %}
