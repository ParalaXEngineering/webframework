{% import 'common/inputs.j2' as common_input %}
{% import 'common/controls.j2' as common_controls %}
{% set path_count = namespace(value=0) %}

{% macro display_item(item) %}
    {% if "itemId" in item %}
    <span id="{{item["itemId"]}}">
    {% else %}

    {% endif %}

    {% if item["type"] == "TEXT" %}
        {{text(item["text"])}}
    {% elif item["type"] == "SEPARATOR" %}
        {{separator()}}
    {% elif item["type"] == "PLACEHOLDER" %}
        {{placeholder(item["id"], item["data"])}}
    {% elif item["type"] == "BUTTON" %}
        {{button(item["id"], item["text"], item["disabled"], item["focus"], item["icon"] if "icon" in item else None)}}
    {% elif item["type"] == "MODALBUTTON" %}
        {{modalbutton(item["path"], item["text"], item["disabled"])}}
    {% elif item["type"] == "MODALLINK" %}
        {{modallink(item["path"], item["text"], item["icon"], item["style"])}}
    {% elif item["type"] == "DOWNLOAD" %}
        {{download(item["id"], item["text"], item["data"])}}
    {% elif item["type"] == "ICONLINK" %}
        {{iconlink(item["id"], item["text"], item["data"], item["icon"], item["style"], item["parameters"])}}
    {% elif item["type"] == "BUTTONLINK" %}
        {{buttonlink(item["id"], item["text"], item["data"], item["icon"], item["style"], item["parameters"])}}
    {% elif item["type"] == "FILE" %}
        {{file(item["id"], item["value"], item["text"], item["endpoint"], item["path"], item["date"])}}
    {% elif item["type"] == "IMAGE" %}
        {{image(item["id"], item["value"], item["data"], item["endpoint"], item["path"], item["css_class"] if "css_class" in item else None, item["width"] if "width" in item else None)}}
    {% elif item["type"] == "INBOX" %}
        {{inbox(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INDATE" %}
        {{indate(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INNUM" %}
        {{innum(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INSTRING" %}
        {{instring(item["id"], item["value"], item["text"], item["focus"])}}
    {% elif item["type"] == "INSTRINGICON" %}
        {{instringicon(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INTEXT" %}
        {{intext(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INTEXTJS" %}
        {{intextjs(item["id"], item["value"], item["text"], item["data"], item["focus"])}}
    {% elif item["type"] == "INMULTITEXT" %}
        {{inmultitext(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INHIDDEN" %}
        {{inhidden(item["id"], item["value"])}}
    {% elif item["type"] == "INFILE" %}
        {{infile(item["id"], item["text"])}}
    {% elif item["type"] == "INFOLDER" %}
        {{infolder(item["id"], item["text"])}}
    {% elif item["type"] == "INIMAGE" %}
        {{inimage(item["id"], item["text"])}}
    {% elif item["type"] == "SELECT" %}
        {{inselect(item["id"], item["data"], item["value"], item["text"], item["tooltips"])}}
    {% elif item["type"] == "INCASCADED" %}
        {{incascaded(item["id"], item["data"], item["value"], item["text"], item["level"])}}
    {% elif item["type"] == "INLISTTEXT" %}
        {{inlisttext(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INLISTSELECT" %}
        {{inlistselect(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "INTEXTSELECT" %}
        {{intextselect(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "INSELECTTEXT" %}
        {{inselecttext(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "INDUALSELECTTEXT" %}
        {{indualselecttext(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "INDUALTEXTSELECT" %}
        {{indualtextselect(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "INTEXTTEXT" %}
        {{intexttext(item["id"], item["value"], item["text"])}}
    {% elif item["type"] == "INMULTISELECT" %}
        {{inmultiselect(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "INMAPPING" %}
        {{inmapping(item["id"], item["data"], item["value"], item["text"])}}
    {% elif item["type"] == "ALERT" %}
        {{alert(
            item["text"], 
            item["style"], 
            item["header"] if "header" in item else None, 
            item["icon"] if "icon" in item else "alert-circle",
            item["itemId"] if "itemId" in item else None,
            item["disabled"] if "disabled" in item else False,
            item["fancy_header"] if "fancy_header" in item else False
        )}}
    {% elif item["type"] == "BADGE" %}
        {{badge(item["text"], item["style"])}}
    {% elif item["type"] == "INFILEEXPLORER"%}
        {{infileexplorer(item["id"], item["text"], item["explorer_titles"], item["explorer_files"], item["explorer_classes"], item["explorer_icons"], item["explorer_hiddens"])}}
    {% elif item["type"] == "GRAPH" %}
        {{graph(item["id"], item["text"], item["graph_x"], item["graph_y"], item["graph_type"])}}
    {% elif item["type"] == "CALENDAR" %}
        {{calendar(item["id"], item["value"], item["data"])}}
    {% elif item["type"] == "CARD" %}
        {{card(item["itemId"], item["text"], item["value"], item["icon"], item["style"], item["data"])}}
    {% elif item["type"] == "DYNAMICCONTENT" %}
        {{dynamiccontent(item["itemId"], item["text"], item["disabled"])}}
    {% elif item["type"] == "BUTTONGROUP" %}
        {{buttongroup(item["itemId"], item["data"], item["value"])}}
    {% elif item["type"] == "ICONTEXT" %}
        {{icontext(item["itemId"], item["icon"], item["text"], item["style"], item["path"])}}
    {% elif item["type"] == "ACTIONBUTTONS" %}
        {{actionbuttons(item["itemId"], item["data"], item["value"], item["style"])}}
    {% elif item["type"] == "CONSOLE" %}
        {{console(item["itemId"], item["data"], item["style"], item["header"])}}
    {% elif item["type"] == "CODE" %}
        {{code(item["itemId"], item["text"], item["path"], item["header"], item["style"], item["disabled"])}}
    {% elif item["type"] == "PROGRESSBAR" %}
        {{progressbar(item["itemId"], item["value"], item["text"], item["style"], item["data"])}}
    {% elif item["type"] == "GRIDEDITOR" %}
        {{grideditor(item["id"], item["data"], item["value"], item["text"])}}
    {% endif %}

    {% if "itemId" in item %}
    </span>
    {% else %}

    {% endif %}
{% endmacro %}

{% macro calendar(id, view, events) %}

<div class="modal fade" id="eventModal" tabindex="-1" role="dialog" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalTitle"></h5>
            </div>
            <div class="modal-body" id="eventModalBody"></div>
        </div>
    </div>
</div>

<div id='calendar'></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar');

    var calendar = new FullCalendar.Calendar(calendarEl, {
    timeZone: 'UTC',
    initialView: '{{view}}',
    events: {{events}},
    editable: false,
    selectable: true,
    eventClick: function(info) {
        // Inject event data into modal
        var modalBody = document.getElementById('eventModalBody');
        modalBody.innerHTML = info.event.extendedProps.description

        var modalTitle = document.getElementById('eventModalTitle');
        modalTitle.innerHTML = info.event.title

        // Show the modal
        $('#eventModal').modal('show');
    }
    });

    calendar.render();
});

</script>
    
    
{% endmacro %}


{% macro badge(text, style) %}
    {% if style != "none" %}
        <div class="badge bg-{{style}}">{{text}}</div>
    {% else %}
        <div>{{text}}</div>
    {% endif %}
{% endmacro %}

{% macro alert(text, style, header, icon, id, dismissible, fancy_header) %}
    {% if style != "none" %}
        {% if fancy_header %}
            {# Legacy two-part alert with colored header bar #}
            <div class="alert-box mb-3" {% if id %}id="{{id}}"{% endif %}>
                {% if header %}
                <div class="d-flex align-items-center justify-content-between alert-{{style}} p-2 border border-bottom-0 rounded-top">
                    <div>
                        <i class="mdi mdi-{{icon}} me-2"></i>
                        <strong>{{header}}</strong>
                    </div>
                    <span class="badge bg-{{style}}">{{style|upper}}</span>
                </div>
                {% endif %}
                <div class="alert alert-light-{{style}} border {% if header %}rounded-0 rounded-bottom{% endif %} m-0">
                    {{text | safe}}
                </div>
            </div>
        {% else %}
            {# Standard Bootstrap alert with header/content split #}
            {% if header %}
                {# Two-part: dark header + light content #}
                <div class="alert-box mb-3" {% if id %}id="{{id}}"{% endif %}>
                    <div class="alert alert-{{style}} p-2 border border-bottom-0 rounded-top mb-0 d-flex align-items-center">
                        {% if icon %}
                        <i class="mdi mdi-{{icon}} me-2"></i>
                        {% endif %}
                        <strong>{{header}}</strong>
                        {% if dismissible %}
                        <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close" onclick="document.getElementById('{{id}}').parentElement.remove()"></button>
                        {% endif %}
                    </div>
                    <div class="alert alert-light-{{style}} border border-top-0 rounded-bottom mb-0">
                        {{text | safe}}
                    </div>
                </div>
            {% else %}
                {# Simple single alert (no header) #}
                <div class="alert alert-{{style}} {% if dismissible %}alert-dismissible fade show{% endif %}" 
                     role="alert" {% if id %}id="{{id}}"{% endif %}>
                    {% if icon %}
                    <i class="mdi mdi-{{icon}}"></i> 
                    {% endif %}
                    {{text | safe}}
                    {% if dismissible %}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    {% endif %}
                </div>
            {% endif %}
        {% endif %}
    {% else %}
        <div>{{text | safe}}</div>
    {% endif %}
{% endmacro %}

{% macro graph(id, text, graphx, graphy, data_type) %}
    {% if text %}
        {{ text }}
    {% endif %}

    <div id="{{ id }}"></div>
    <script type="text/javascript">
    var {{ id }}_Options = {
        chart: {
            type: "{{ 'bar' if data_type == 'bar' else 'line' }}",
            height: 350
        },
        series: [
                {% if data_type == "bar" %}
                    {
                    name: 'Data',
                    data: [
                        {% for key, value in graphy.items() %}
                            {
                                x: "{{ key }}",
                                y: {{ value }}
                            }{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ]
                }
                {% else %}
                {% for serie in graphy %}
                    {% if not loop.first %},{% endif %}
                    {
                        name: "{{ serie }}",
                        data: [
                            {% for i in range(graphx | length) %}
                                [{{ graphx[i]|int }}, {{ graphy[serie][i] }}]{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ]
                    }
                {% endfor %}
                {% endif %}
        ],
        {% if data_type == "date" %}
        xaxis: {
            type: 'datetime',
            labels: {
                datetimeUTC: false
            }
        },
        {% elif data_type == "number" %}
        xaxis: {
            type: 'numeric',
            tickAmount: 20
        },
        {% elif data_type == "bar" %}
        xaxis: {
            categories: [
                {% for item in graphx %}
                    "{{ item }}"{% if not loop.last %},{% endif %}
                {% endfor %}
            ]
        },
        {% endif %}
        
        tooltip: {
            enabled: true,
            followCursor: true,
            x: {
                format: 'dd/MM hh:mm:ss'
            }
        }
    };
    var {{ id }} = new ApexCharts(document.querySelector("#{{ id }}"), {{ id }}_Options);
    {{ id }}.render();
    </script>
{% endmacro %}

{% macro text(text) %}
    {{text}}
{% endmacro %}

{% macro separator() %}
    <hr class="my-3">
{% endmacro %}

{% macro placeholder(id, data) %}
    <div id="{{id}}">{{data}}</div>
{% endmacro %}

{% macro button(id, text, disabled = false, focus = false, icon = None) %}
    <button name="{{ id }}" id="{{ id }}" type="submit" onclick="saveScrollPosition()" class="btn btn-primary {%if focus %} focusable {%endif%}" {% if disabled %}disabled{% endif %}>
        {% if icon %}<i class="mdi mdi-{{icon}}"></i>{% endif %}
        {% if text %}{{text}}{% endif %}
    </button>
{% endmacro %}

{% macro modalbutton(link, text, disabled = false) %}
    <button type="button" class="btn btn-warning mx-1" data-bs-toggle="modal" data-bs-target="#modal_{{link}}", id="{{link}}">
        {{text}}
    </button>
{% endmacro %}

{% macro modallink(link, text, icon, style) %}
    <p><a  data-bs-toggle="modal" data-bs-target="#modal_{{link}}", id="{{link}}">
        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
        {% if text %}{{ text }}{% endif %}
    </a></p>
{% endmacro %}

{% macro image(id, src, height, endpoint, path, css_class, width) %}
    {% set style_attr = '' %}
    {% if css_class and 'rounded-circle' in css_class %}
        {% set style_attr = 'object-fit: cover;' %}
    {% endif %}
    {% if path == "/" %}
    <img class="zoomable{% if css_class %} {{ css_class }}{% endif %}" src="{{ url_for('common.assets', asset_type=endpoint, filename=src) }}" height="{{ height }}"{% if width %} width="{{ width }}"{% endif %}{% if style_attr %} style="{{ style_attr }}"{% endif %}>
    {% elif path %}    
    <img class="zoomable{% if css_class %} {{ css_class }}{% endif %}" src="{{ url_for('common.assets', asset_type=endpoint, filename=path + '/' + src) }}" height="{{ height }}"{% if width %} width="{{ width }}"{% endif %}{% if style_attr %} style="{{ style_attr }}"{% endif %}>
    {% else %}
    <img {% if css_class %}class="{{ css_class }}"{% endif %} src="{{src}}" height="{{height}}"{% if width %} width="{{ width }}"{% endif %}{% if style_attr %} style="{{ style_attr }}"{% endif %}>
    {% endif %}
{% endmacro %}

{% macro file(id, src, text, endpoint, path, date) %}
    {% if ".docx" in src | lower or ".doc" in src | lower %}
    <i class="mdi mdi-file-word text-primary"></i>
    {% elif ".xlsx" in src | lower or ".xls" in src | lower %}
    <i class="mdi mdi-file-excel text-success"></i>
    {% elif ".pptx" in src | lower or ".ppt" in src | lower %}
    <i class="mdi mdi-file-powerpoint text-warning"></i>
    {% elif ".pdf" in src | lower %}
    <i class="mdi mdi-file-document text-danger"></i>
    {% elif ".html" in src | lower%}
    <i class="mdi mdi-file-view text-primary"></i>
    {% elif ".c" in src | lower or ".cpp" in src | lower or ".h" in src | lower or ".py" in src | lower%}
    <i class="mdi mdi-file-code text-primary"></i>
    {% elif ".zip" in src | lower or ".rar" in src | lower or ".tar" in src | lower or ".7z" in src | lower%}
    <i class="mdi mdi-folder-zip text-primary"></i>
    {% elif ".png" in src | lower or ".jpeg" in src | lower or ".jpg" in src | lower or ".jfif" in src | lower%}
    <i class="mdi mdi-image text-primary"></i>
    {% else %}
    <i class="mdi mdi-file-document text-primary"></i>
    {% endif %}

    {% if path %}
    <a href="{{ url_for('common.assets', asset_type=endpoint, filename=path + '/' + src) }}"> {{ text }}</a>
    {% else %}
    <a href="{{src}}">{{ text }}
    {% endif %}

    {% if date %}
    ({{date}})
    {% endif %}
{% endmacro %}

{% macro download(id, text, link) %}
    <a class="btn btn-primary" href="{{url_for(link)}}"}>{{text}}</a>
{% endmacro %}

{% macro iconlink(id, text, link, icon, style, parameters) %}
    {% if link %}
        {% if "http" in link%}
        <a href="{{link}}">
        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
        {{text}}
        </a>
        {% elif "#" in link%}
        <a id="{{id}}" href="{{link}}">
        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
        {{text}}
        </a>
        {% else %}
            {% if '/' in link %}
                {% if parameters %}
                    <a href="{{link}}?{{parameters | join('&')}}">
                        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
                        {{text}}
                    </a>
                {% else %}
                    <a href="{{link}}">
                        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
                        {{text}}
                    </a>
                {% endif %}
            {% else %}
                {% if parameters %}
                    <a href="{{url_for(link)}}?{{parameters | join('&')}}">
                        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
                        {{text}}
                    </a>
                {% else %}
                    <a href="{{url_for(link)}}">
                        <i class="mdi mdi-{{icon}} text-{{style}}"></i>
                        {{text}}
                    </a>
                {% endif %}
            {% endif %}
        {% endif %}
    {% else %}
    <i class="mdi mdi-{{icon}} text-{{style}}"></i>
    {{text}}
    {% endif %}
{% endmacro %}

{% macro buttonlink(id, text, link, icon, style, parameters) %}
    {% if link %}
        {% if "http" in link%}
        <a href="{{link}}" class="btn btn-{{style}}">
        <h2><i class="mdi mdi-{{icon}} text-light"></i></h2>
        {{text}}
        </a>
        {% elif "#" in link%}
        <a id="{{id}}" href="{{link}}" class="btn btn-{{style}}">
        <h2><i class="mdi mdi-{{icon}} text-light"></i></h2>
        {{text}}
        </a>
        {% else %}
            {% if '/' in link %}
                {% if parameters %}
                    <a href="{{link}}?{{parameters | join('&')}}" class="btn btn-{{style}}">
                        <h2><i class="mdi mdi-{{icon}} text-light"></i></h2>
                        {{text}}
                    </a>
                {% else %}
                    <a href="{{link}}" class="btn btn-{{style}}">
                        <h2><i class="mdi mdi-{{icon}} text-light" ></i></h2>
                        {{text}}
                    </a>
                {% endif %}
            {% else %}
                {% if parameters %}
                    <a href="{{url_for(link)}}?{{parameters | join('&')}}" class="btn btn-{{style}}">
                        <h2><i class="mdi mdi-{{icon}} text-light"></i></h2>
                        {{text}}
                    </a>
                {% else %}
                    <a href="{{url_for(link)}}" class="btn btn-{{style}}">
                        <h2><i class="mdi mdi-{{icon}} text-light"></i></h2>
                        {{text}}
                    </a>
                {% endif %}
            {% endif %}
        {% endif %}
    {% else %}
    <h2><i class="mdi mdi-{{icon}} text-{{style}}"></i></h2>
    {{text}}
    {% endif %}
{% endmacro %}

{% macro inbox(id, value, text) %}
    {% if value %}
        {{ common_input.check(id, value)}}
    {% else %}
        {{ common_input.check(id, history[id] if history is defined else None)}}
    {% endif %}

    {% if text %}
        {{ text }}
    {% endif %}
{% endmacro %}

{% macro indate(id, value, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% if value %}
        {{ common_input.date(id, value)}}
    {% else %}
        {{ common_input.date(id, history[id] if history is defined else None)}}
    {% endif %}
{% endmacro %}

{% macro infileexplorer(id, text, title, files, class, icon, hidden) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% for i in range(0,files | length) %}
        <div id="{{id | replace(" ", "_") | replace(".", "_")}}_files{{i}}">
        {{ common_input.files(id | replace(" ", "_") | replace(".", "_"), title[i], files[i], class[i], icon[i], hidden[i] ) }}
        </div>
    {% endfor %}
    
{% endmacro %}

{% macro innum(id, value, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% if value %}
        {{ common_input.number(id, value)}}
    {% else %}
        {{ common_input.number(id, history[id] if history is defined else None)}}
    {% endif %}
{% endmacro %}

{% macro inselect(id, data, value, text, tooltips) %}
    {% if text %}
        {{ text }}
    {% endif %}
    {% if value %}
        {{ common_input.select(id, data, value, false, tooltips)}}
    {% else %}
        {{ common_input.select(id, data, history[id] if history is defined else None, false, tooltips)}}
    {% endif %}
{% endmacro %}

{% macro incascaded(id, data, value, text, level) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set ns = namespace(data=data) %}

    {% for i in range(0, id | length) %}
        {% if level == -1 %}
            {% if i == 0 %}
                {{ common_input.select_js(
                    id[0], 
                    'cascaded(' + (data | tojson | safe) + ', ' + (id | tojson | safe) + ', this)', 
                    data.keys() | list | sort, 
                    value[0]
                ) }}
            {% else %}
                {{ common_input.select_js(
                    id[i], 
                    'cascaded(' + (data | tojson | safe) + ', ' + (id | tojson | safe) + ', this)', 
                    ([""] if ns.data is none or not ns.data or value[i-1] not in ns.data or ns.data[value[i-1]] is not iterable else ns.data[value[i-1]].keys()) | list | sort, 
                    value[i]
                ) }}
                {% if ns.data is none or not ns.data or value[i-1] not in ns.data %}
                {% else %}
                    {% set ns.data = ns.data[value[i-1]] %}
                {% endif %}
            {% endif %}  

        {% else %}
            {% if level == i%}
                {% if i == 0 %}
                    {{ common_input.select_js(
                        id[level], 
                        'cascaded(' + (data | tojson | safe) + ', ' + (id | tojson | safe) + ', this)', 
                        data.keys() | list | sort, 
                        value[level]
                    ) }}
                {% else %}
                    
                    {{ common_input.select_js(
                        id[i], 
                        'cascaded(' + (data | tojson | safe) + ', ' + (id | tojson | safe) + ', this)', 
                        ([""] if data is none or not data or value[i-1] not in data or data[value[i-1]] is not iterable else data[value[i-1]].keys()) | list | sort, 
                        value[i]
                    ) }}
                {% endif %}  
            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}



{% macro inlistselect(id, data, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}   

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
        <div id="{{id}}.div" class="col-sm-10">
        {# Special case: we were given an empty list, that means that we need to display an empty field, but with a masked item so we can add items #}
        {% if values == [None]%}
            <div class="row" id="{{id + ".div0" }}">
                <div class="col-sm-12">
                    <select class="form-control" id="{{ id + ".masked" }}" style="display: none">
                    {% for item in data %}
                        <option>{{item}}</option>
                    {% endfor %}
                    </select>
                </div>
            </div>
        {% else %}
            {% for subitem in values %}
                    <div class="row" id="{{id + ".div" + loop.index0 | string }}">
                        <div class="col-sm-12">{{common_input.select(id + ".list" + loop.index0 | string, data, values[loop.index0]) }} </div>
                    </div>
                    {% set displayed.value = displayed.value + 1 %}
            {% endfor %}
            {% if displayed.value == 0 %}
                <div class="row" id="{{id}}.div">
                    <div class="col-sm-6">{{common_input.inputstring(id + ".list0") }} </div>
                </div>
            {% endif %}
        {% endif %}
        </div>
        <div class="col-sm-2">
            <a  onclick="setting_add_list('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
            <a  onclick="setting_rm_list('{{id}}')"><i class="mdi mdi-minus-circle text-primary" style="padding:5px"></i></a>
        </div>
    </div>
{% endmacro %}

{% macro inlisttext(id, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
        <div id="{{id}}.div" class="col-sm-10">
        {% for subitem in values %}
                <div class="row" id="{{id + ".div" + loop.index0 | string }}">
                    <div class="col-sm-12">{{common_input.inputstring(id + ".list" + loop.index0 | string, values[loop.index0]) }} </div>
                </div>
                {% set displayed.value = displayed.value + 1 %}
        {% endfor %}
        {% if displayed.value == 0 %}
            <div class="row" id="{{id}}.div">
                <div class="col-sm-6">{{common_input.inputstring(id + ".list0") }} </div>
            </div>
        {% endif %}
        </div>
        <div class="col-sm-2">
            <a  onclick="setting_add_list('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
            <a  onclick="setting_rm_list('{{id}}')"><i class="mdi mdi-minus-circle text-primary" style="padding:5px"></i></a>
        </div>
    </div>
{% endmacro %}

{% macro indualtextselect(id, data, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
        <div id="{{id}}.div" class="col-sm-11">
        {% for subitem in values %}
                <div class="row" id="{{id + ".maprow" + loop.index0 | string }}">
                        <div class="col-sm-3">{{common_input.inputstring(id + ".mapAright" + loop.index0 | string, values[loop.index0][0]) }} </div>
                        <div class="col-sm-3">{{common_input.select(id + ".mapAleft" + loop.index0 | string, data, values[loop.index0][1]) }} </div>

                        <div class="col-sm-3">{{common_input.inputstring(id + ".mapBright" + loop.index0 | string, values[loop.index0][2]) }} </div>
                        <div class="col-sm-3">{{common_input.select(id + ".mapBleft" + loop.index0 | string, data, values[loop.index0][3]) }} </div>
                </div>
                {% set displayed.value = displayed.value + 1 %}
        {% endfor %}
        {% if displayed.value == 0 %}
            <div class="row" id="{{id}}.maprow0">
                    <div class="col-sm-3">{{common_input.inputstring(id + ".mapAright0") }} </div>
                    <div class="col-sm-3">{{common_input.select(id + ".mapAleft0", data) }} </div>

                    <div class="col-sm-3">{{common_input.inputstring(id + ".mapBright0") }} </div>
                    <div class="col-sm-3">{{common_input.select(id + ".mapBleft0", data) }} </div>
            </div>
        {% endif %}
        </div>
        <div class="col-sm-1">
            <a  onclick="setting_add_dual_mapping('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
        </div>
    </div>
{% endmacro %}

{% macro intextselect(id, data, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
    <div id="{{id}}.div" class="col-sm-11">
    {% for subitem in values %}
            <div class="row" id="{{id + ".maprow" + loop.index0 | string }}">
                    <div class="col-sm-6">{{common_input.inputstring(id + ".mapright" + loop.index0 | string, values[loop.index0][1]) }} </div>
                    <div class="col-sm-6">{{common_input.select(id + ".mapleft" + loop.index0 | string, data, values[loop.index0][0]) }} </div>
            </div>
            {% set displayed.value = displayed.value + 1 %}
    {% endfor %}
    {% if displayed.value == 0 %}
        <div class="row" id="{{id}}.maprow0">
                <div class="col-sm-6">{{common_input.inputstring(id + ".mapright0") }} </div>
                <div class="col-sm-6">{{common_input.select(id + ".mapleft0", data) }} </div>
        </div>
    {% endif %}
    </div>
    <div class="col-sm-1">
        <a  onclick="setting_add_mapping('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
    </div>
    </div>
{% endmacro %}

{% macro inselecttext(id, data, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
    <div id="{{id}}.div" class="col-sm-11">
    {% for subitem in values %}
            <div class="row" id="{{id + ".maprow" + loop.index0 | string }}">
                    <div class="col-sm-6">{{common_input.select(id + ".mapleft" + loop.index0 | string, data, values[loop.index0][0]) }} </div>
                    <div class="col-sm-6">{{common_input.inputstring(id + ".mapright" + loop.index0 | string, values[loop.index0][1]) }} </div>
            </div>
            {% set displayed.value = displayed.value + 1 %}
    {% endfor %}
    {% if displayed.value == 0 %}
        <div class="row" id="{{id}}.maprow0">
                <div class="col-sm-6">{{common_input.select(id + ".mapleft0", data) }} </div>
                <div class="col-sm-6">{{common_input.inputstring(id + ".mapright0") }} </div>
        </div>
    {% endif %}
    </div>
    <div class="col-sm-1">
        <a  onclick="setting_add_mapping('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
    </div>
    </div>
{% endmacro %}

{% macro indualselecttext(id, data, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
    <div id="{{id}}.div" class="col-sm-11">
    {% for subitem in values %}
            <div class="row" id="{{id + ".maprow" + loop.index0 | string }}">
                    <div class="col-sm-3">{{common_input.select(id + ".mapAleft" + loop.index0 | string, data, values[loop.index0][1]) }} </div>
                    <div class="col-sm-3">{{common_input.inputstring(id + ".mapAright" + loop.index0 | string, values[loop.index0][0]) }} </div>

                    <div class="col-sm-3">{{common_input.select(id + ".mapBleft" + loop.index0 | string, data, values[loop.index0][3]) }} </div>
                    <div class="col-sm-3">{{common_input.inputstring(id + ".mapBright" + loop.index0 | string, values[loop.index0][2]) }} </div>

            </div>
            {% set displayed.value = displayed.value + 1 %}
    {% endfor %}
    {% if displayed.value == 0 %}
        <div class="row" id="{{id}}.maprow0">
                <div class="col-sm-3">{{common_input.select(id + ".mapAleft0", data) }} </div>
                <div class="col-sm-3">{{common_input.inputstring(id + ".mapAright0") }} </div>

                <div class="col-sm-3">{{common_input.select(id + ".mapBleft0", data) }} </div>
                <div class="col-sm-3">{{common_input.inputstring(id + ".mapBright0") }} </div>
        </div>
    {% endif %}
    </div>
    <div class="col-sm-1">
        <a  onclick="setting_add_dual_mapping('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
    </div>
    </div>
{% endmacro %}

{% macro intexttext(id, values, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% set displayed = namespace(value=0) %}
    <div class="row align-items-center">
    <div id="{{id}}.div" class="col-sm-11">
    {% for subitem in values %}
            <div class="row" id="{{id + ".maprow" + loop.index0 | string }}">
                <div class="col-sm-6">{{common_input.inputstring(id + ".mapleft" + loop.index0 | string, values[loop.index0][0]) }} </div>
                <div class="col-sm-6">{{common_input.inputstring(id + ".mapright" + loop.index0 | string, values[loop.index0][1]) }} </div>
            </div>
            {% set displayed.value = displayed.value + 1 %}
    {% endfor %}
    {% if displayed.value == 0 %}
        <div class="row" id="{{id}}.maprow0">
            <div class="col-sm-6">{{common_input.inputstring(id + ".mapleft0") }} </div>
            <div class="col-sm-6">{{common_input.inputstring(id + ".mapright0") }} </div>
        </div>
    {% endif %}
    </div>
    <div class="col-sm-1">
        <a  onclick="setting_add_mapping('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
        <a  onclick="setting_rm_mapping('{{id}}')"><i class="mdi mdi-minus-circle text-primary" style="padding:5px"></i></a>
    </div>
    </div>
{% endmacro %}

{% macro inmultiselect(id, data, value, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    <div class="col-sm-12" id="{{id}}.div">
        <div class="row">
            <div class="col-sm-10">
            {% for list_item in value%}
                {{ common_input.select_js(id + ".list" + loop.index0 | string, "settings_list_format('" + id + "')", data, list_item)}}
            {% endfor %}
            {{ common_input.hidden(id, value | join('#')) }}
            </div>
            <div class="col-sm-2">
                <a  onclick="setting_add_list('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
                <a  onclick="setting_rm_list('{{id}}')"><i class="mdi mdi-minus-circle text-primary" style="padding:5px"></i></a>
            </div>
        </div>
    </div>

{% endmacro %}

{% macro inmapping(id, data, value, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    <div class="col-sm-12" id="{{id}}.div">
    {% for col in value %}
        <div class="form-group row">
            <div class="col-sm-4">{{ col }}: </div>
            <div class="col-sm-6" id="{{id + "." + col}}.div">
                {% for list_item in value[col] %}
                    {% if data %}
                        {{ common_input.select_js(id + "." + col + ".list" + loop.index0 | string, "settings_list_format('" + id + "." + col + "')", data, list_item)}}
                    {% else %}
                        {{ common_input.input_js(id + "." + col + ".list" + loop.index0 | string, "settings_list_format('" + id + "." + col + "')", list_item)}}
                    {% endif %}
                {% endfor %}
                {{ common_input.hidden(id + "." + col, value[col] | join('#')) }}
            </div>
            <div class="col-sm-2">
                <a href="#a" onclick="setting_add_list('{{ id + "." + col}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
                <a href="#a" onclick="setting_rm_list('{{ id + "." + col}}')"><i class="mdi mdi-minus-circle text-primary" style="padding:5px"></i></a>
            </div>
        </div>
    {% endfor%}
    </div>
{% endmacro %}

{% macro instring(id, value, text, focus) %}
    {% if text %}
        <span>{{ text }}</span>
    {% endif %}

    {% if value %}
        {{ common_input.inputstring(id, value, focus)}}
    {% else %}
        {{ common_input.inputstring(id, history[id] if history is defined else None, focus)}}
    {% endif %}
{% endmacro %}

{% macro instringicon(id, value, text) %}
    {% if text %}
        <span>{{ text }}</span>
    {% endif %}

    <div class="form-group row">
        <div class="col-sm-10">
            {{ common_input.input_js(id, "settings_update_icon('" + id + "')", value if value else "")}}
        </div>
        <div class="col-sm-2" id="{{id}}.div">
            {% if value %}
                <i class="mdi mdi-{{value}}" style="font-size: 24px;"></i>
            {% else %}
                <i class="mdi mdi-help" style="font-size: 24px;"></i>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{% macro intext(id, value, text) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% if value %}
        {{ common_input.inputtext(id, value)}}
    {% else %}
        {{ common_input.inputtext(id, history[id] if history is defined else None)}}
    {% endif %}
{% endmacro %}

{% macro intextjs(id, value, text, data, focus) %}
    {% if text %}
        {{ text }}
    {% endif %}

    {% if value %}
        {{ common_input.input_js(id, data, value, focus)}}
    {% else %}
        {{ common_input.input_js(id, data, history[id] if history is defined else None, focus)}}
    {% endif %}
{% endmacro %}

{% macro inmultitext(id, value, text) %}
    <div class="row">
        {% if text %}
            {{ text }}
        {% endif %}

        <div id="{{id}}.div" class="col-sm-10">
        {% for list_item in value %}
            {{ common_input.input_js(id + ".list" + loop.index0 | string, "settings_list_format('" + id + "')", list_item)}}
        {% endfor %}
        {{ common_input.hidden(id, value | join('#')) }}
        </div>
        <div class="col-sm-2">
        <a  onclick="setting_add_list('{{id}}')"><i class="mdi mdi-plus-circle text-primary" style="padding:5px"></i></a>
        <a  onclick="setting_rm_list('{{id}}')"><i class="mdi mdi-minus-circle text-primary" style="padding:5px"></i></a>
        </div>
    </div>

{% endmacro %}

{% macro inhidden(id, value) %}
    {{ common_input.hidden(id, value)}}
{% endmacro %}

{% macro infile(id, file) %}
    {{ common_input.file(id)}}
{% endmacro %}

{% macro infolder(id, file) %}
    {{ common_input.folder(id)}}
{% endmacro %}

{% macro inimage(id, file) %}
    {{ common_input.image(id)}}
{% endmacro %}
{# New item macros #}

{% macro card(id, title, body, icon, header_color, footer_buttons) %}
<div class="card mb-3" id="{{id}}">
    <div class="card-header bg-{{header_color}} text-white">
        {% if icon %}
        <i class="mdi mdi-{{icon}}"></i> 
        {% endif %}
        <strong>{{title}}</strong>
    </div>
    <div class="card-body">
        {{body | safe}}
    </div>
    {% if footer_buttons and footer_buttons | length > 0 %}
    <div class="card-footer">
        {% for btn in footer_buttons %}
        <button type="submit" name="{{btn.id}}" value="{{btn.id}}" 
                class="btn btn-{{btn.style if btn.style else 'primary'}}">
            {% if btn.icon %}
            <i class="{{btn.icon}}"></i> 
            {% endif %}
            {{btn.text}}
        </button>
        {% endfor %}
    </div>
    {% endif %}
</div>
{% endmacro %}

{% macro dynamiccontent(id, initial_content, card) %}
<div id="{{id}}" {% if card %}class="card card-body"{% endif %}>
    {{initial_content | safe}}
</div>
{% endmacro %}

{% macro buttongroup(id, buttons, layout) %}
<div class="btn-group{% if layout == 'vertical' %}-vertical{% endif %}" 
     role="group" id="{{id}}">
    {% for btn in buttons %}
    <button type="submit" name="{{btn.id}}" value="{{btn.id}}" 
            class="btn btn-{{btn.style if btn.style else 'primary'}}"
            {% if btn.disabled %}disabled{% endif %}>
        {% if btn.icon %}
        <i class="{{btn.icon}}"></i> 
        {% endif %}
        {{btn.text}}
    </button>
    {% endfor %}
</div>
{% endmacro %}

{% macro icontext(id, icon, text, color, link) %}
<div id="{{id}}" class="{% if color %}text-{{color}}{% endif %}">
    {% if link %}
    <a href="{{link}}" class="{% if color %}text-{{color}}{% endif %}">
    {% endif %}
    <i class="mdi mdi-{{icon}}"></i> {{text}}
    {% if link %}
    </a>
    {% endif %}
</div>
{% endmacro %}

{% macro actionbuttons(id, actions, size, display_style) %}
{# Action buttons for CRUD operations (View, Edit, Delete, etc.)
   Renders as compact icon buttons or button group
   
   Parameters:
   - id: unique identifier
   - actions: list of action dicts with keys: type, url, icon, style, tooltip, disabled
   - size: button size (sm, md, lg)
   - display_style: "buttons" for btn styling, "icons" for plain icons
#}
<div id="{{id}}" class="action-buttons d-inline-flex gap-1" role="group">
    {% for action in actions %}
        {% set btn_size = 'btn-' + size if size and size != 'md' else '' %}
        {% set btn_class = 'btn btn-' + (action.style if action.style else 'secondary') + ' ' + btn_size if display_style == 'buttons' else 'btn btn-link text-' + (action.style if action.style else 'secondary') + ' p-1' %}
        
        <a href="{{action.url if action.url else '#'}}" 
           class="{{btn_class}}" 
           data-bs-toggle="tooltip" 
           data-bs-placement="top" 
           title="{{action.tooltip if action.tooltip else action.type|capitalize}}"
           {% if action.disabled %}disabled aria-disabled="true"{% endif %}>
            <i class="{{action.icon}}"></i>
        </a>
    {% endfor %}
</div>
{% endmacro %}

{# Console output display with terminal-like styling
   
   Parameters:
   - id: unique identifier
   - lines: list of console output lines
   - max_height: maximum height before scrolling (e.g., "300px")
   - title: optional header/title for console block
#}
{% macro console(id, lines, max_height, title) %}
<div id="{{id}}" class="console-output">
    {% if title %}
    <div class="console-header d-flex align-items-center mb-2">
        <i class="mdi mdi-console me-2"></i>
        <strong>{{title}}</strong>
    </div>
    {% endif %}
    <div style="background:#1e1e1e; color:#d4d4d4; padding:12px; border-radius:6px; max-height:{{max_height if max_height else '300px'}}; overflow-y:auto; font-family:'Courier New', Consolas, monospace; font-size:0.9rem; line-height:1.5;">
        {% for line in lines %}
        {{line}}<br>
        {% endfor %}
    </div>
</div>
{% endmacro %}

{# Code block with syntax highlighting
   
   Parameters:
   - id: unique identifier
   - code: source code content
   - language: programming language (python, javascript, etc.)
   - title: optional filename/title
   - max_height: maximum height before scrolling
   - show_line_numbers: whether to show line numbers
#}
{% macro code(id, code, language, title, max_height, show_line_numbers) %}
<div id="{{id}}" class="code-block mb-3">
    {% if title %}
    <div class="code-header d-flex align-items-center justify-content-between bg-light p-2 border border-bottom-0 rounded-top">
        <div>
            <i class="mdi mdi-file-code me-2"></i>
            <strong>{{title}}</strong>
        </div>
        {% if language %}
        <span class="badge bg-secondary">{{language}}</span>
        {% endif %}
    </div>
    {% endif %}
    <pre class="m-0 border rounded{% if not title %}-top{% endif %}" style="max-height:{{max_height if max_height else '500px'}}; overflow-y:auto;"><code class="language-{{language if language else 'plaintext'}}">{{code}}</code></pre>
</div>
<script>
    // Initialize syntax highlighting for this code block
    document.addEventListener('DOMContentLoaded', function() {
        if (typeof hljs !== 'undefined') {
            document.querySelectorAll('#{{id}} pre code').forEach((block) => {
                hljs.highlightElement(block);
            });
        }
    });
</script>
{% endmacro %}

{% macro progressbar(id, value, label, style, data) %}
<div id="{{id}}" class="progress-container mb-3">
    {% if label %}
    <label class="form-label">{{label}}</label>
    {% endif %}
    <div class="progress" {% if data.height %}style="height: {{data.height}}px;"{% endif %}>
        <div class="progress-bar {% if style != 'DEFAULT' %}bg-{{style|lower}}{% endif %} {% if data.striped %}progress-bar-striped{% endif %} {% if data.animated %}progress-bar-animated{% endif %}" 
             role="progressbar" 
             style="width: {{value}}%;" 
             aria-valuenow="{{value}}" 
             aria-valuemin="0" 
             aria-valuemax="100">
            {% if data.show_percentage %}{{value}}%{% endif %}
        </div>
    </div>
</div>
{% endmacro %}

{% macro grideditor(id, fields, value, columns) %}
{# Interactive grid layout editor using GridStack.js
   
   Parameters:
   - id: unique identifier for the editor and hidden field
   - fields: dict mapping field_id to field_name {"field1": "Field Name", ...}
   - value: optional JSON string with existing layout config
   - columns: number of grid columns (default: 12)
#}
<div id="{{id}}_editor_container" class="grid-editor-container mb-3">
    {# Field selector dropdown #}
    <div class="mb-3 d-flex gap-2 align-items-center">
        <label for="{{id}}_field_selector" class="form-label mb-0">Add Field:</label>
        <select id="{{id}}_field_selector" class="form-select" style="max-width: 300px;">
            <option value="">-- Select a field to add --</option>
            {% for field_id, field_name in fields.items() %}
            <option value="{{field_id}}">{{field_name}}</option>
            {% endfor %}
        </select>
        <button type="button" class="btn btn-primary" onclick="gridEditor_{{id|replace(' ', '_')|replace('.', '_')}}.addFieldFromSelector()">
            <i class="mdi mdi-plus"></i> Add to Grid
        </button>
    </div>
    
    {# GridStack editor area #}
    <div class="grid-stack show-grid" id="{{id}}_grid"></div>
    
    {# Hidden field to store JSON configuration (for form submission) #}
    <input type="hidden" id="{{id}}" name="{{id}}" value="">
    
    {# Store initial value in a script tag to avoid HTML escaping issues #}
    {% if value %}
    <script type="application/json" id="{{id}}_initial_data">
        {{value|safe}}
    </script>
    {% endif %}
</div>

<script>
// Initialize grid editor for {{id}}
(function() {
    const editorId = '{{id}}';
    const editorIdSafe = '{{id|replace(" ", "_")|replace(".", "_")}}'; // Sanitized for JavaScript variable names
    
    // Create global API object immediately (will be populated when GridStack loads)
    window['gridEditor_' + editorIdSafe] = {
        addFieldFromSelector: function() {
            console.warn('Grid editor not yet initialized');
        },
        removeItem: function() {
            console.warn('Grid editor not yet initialized');
        }
    };
    
    // Wait for GridStack to be available
    function initEditor() {
        if (typeof GridStack === 'undefined') {
            console.warn('GridStack not yet loaded, retrying...');
            setTimeout(initEditor, 100);
            return;
        }
        
        const gridEl = document.getElementById(editorId + '_grid');
        const hiddenField = document.getElementById(editorId);
        const fieldSelector = document.getElementById(editorId + '_field_selector');
        const columns = {{ columns|int if columns else 12 }};
        const fields = {{fields | tojson | safe}};
        
        console.log('Grid editor config:', {editorId, columns, fieldCount: Object.keys(fields).length});
        
        // Initialize GridStack
        const grid = GridStack.init({
            column: columns,
            cellHeight: 60,
            margin: 10,
            float: false,
            removable: false,
            acceptWidgets: false
        }, gridEl);
    
    // Auto-save on any change
    grid.on('added removed change', function(e, items) {
        saveGridLayout();
    });
    
    function saveGridLayout() {
        const items = [];
        grid.engine.nodes.forEach(node => {
            items.push({
                field_id: node.el.dataset.fieldId,
                x: node.x,
                y: node.y,
                w: node.w,
                h: node.h
            });
        });
        
        const config = {
            version: "1.0",
            columns: columns,
            items: items
        };
        
        hiddenField.value = JSON.stringify(config);
    }
    
    function createItemContent(fieldId) {
        const fieldName = fields[fieldId] || fieldId;
        
        const div = document.createElement('div');
        div.className = 'grid-stack-item-content';
        div.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="badge bg-primary">${fieldId}</span>
                <button type="button" class="btn-close btn-sm" onclick="gridEditor_${editorIdSafe}.removeItem(this)" aria-label="Remove"></button>
            </div>
            <div class="text-muted small">${fieldName}</div>
        `;
        
        return div;
    }
    
    function addField(fieldId, x, y, w, h) {
        if (!fieldId || !fields[fieldId]) {
            console.warn('Invalid field ID:', fieldId);
            return;
        }
        
        const widget = document.createElement('div');
        widget.className = 'grid-stack-item';
        widget.dataset.fieldId = fieldId;
        widget.setAttribute('gs-x', x || 0);
        widget.setAttribute('gs-y', y || 0);
        widget.setAttribute('gs-w', w || 4);
        widget.setAttribute('gs-h', h || 2);
        
        const content = createItemContent(fieldId);
        widget.appendChild(content);
        
        grid.addWidget(widget);
        saveGridLayout();
    }
    
    function addFieldFromSelector() {
        const fieldId = fieldSelector.value;
        if (!fieldId) {
            alert('Please select a field to add');
            return;
        }
        
        // Check if field already exists
        const exists = Array.from(grid.engine.nodes).some(node => node.el.dataset.fieldId === fieldId);
        if (exists) {
            alert('This field is already in the grid');
            return;
        }
        
        // Add with default position
        addField(fieldId, 0, 0, 4, 2);
        fieldSelector.value = '';
    }
    
    function removeItem(btnElement) {
        const item = btnElement.closest('.grid-stack-item');
        grid.removeWidget(item);
        saveGridLayout();
    }
    
    // Load existing layout if provided
    const initialDataScript = document.getElementById(editorId + '_initial_data');
    console.log('[GridEditor] Initial data script:', initialDataScript);
    
    if (initialDataScript) {
        try {
            const initialJson = initialDataScript.textContent;
            console.log('[GridEditor] Initial JSON (first 100 chars):', initialJson.substring(0, 100));
            const config = JSON.parse(initialJson);
            console.log('[GridEditor] Parsed config:', config);
            
            if (config.items && Array.isArray(config.items)) {
                console.log('[GridEditor] Loading', config.items.length, 'items');
                config.items.forEach(item => {
                    console.log('[GridEditor] Adding item:', item);
                    addField(item.field_id, item.x, item.y, item.w, item.h);
                });
            } else {
                console.log('[GridEditor] No items found in config');
            }
        } catch (e) {
            console.error('[GridEditor] Failed to load grid layout:', e);
            console.error('[GridEditor] Script content:', initialDataScript ? initialDataScript.textContent : 'N/A');
        }
    } else {
        console.log('[GridEditor] No existing layout to load');
    }
    
    // Update global API with actual functions (now that GridStack is loaded)
    window['gridEditor_' + editorIdSafe].addFieldFromSelector = addFieldFromSelector;
    window['gridEditor_' + editorIdSafe].removeItem = removeItem;
    
    console.log('Grid editor initialized for:', editorId);
    }
    
    // Start initialization (will retry if GridStack not loaded yet)
    initEditor();
})();
</script>
{% endmacro %}


