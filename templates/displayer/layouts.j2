{% import 'displayer/items.j2' as disp_item %}

{% macro display_layout(layout = [])%}
    {% if layout["type"] == "VERT" %}
        {{ display_vertical_layout(layout["columns"], layout["containers"], layout["align"], layout["spacing"], layout["height"], layout["background"], layout["user_id"], layout["style"]) }}
    {% elif layout["type"] == "HORIZ" %}
        {{ display_horizontal_layout(layout["columns"], layout["containers"], layout["align"], layout["spacing"], layout["user_id"]) }}
    {% elif layout["type"] == "TABLE" %}
        {{ display_table_layout(layout["header"], layout["lines"], layout.get("responsive"), layout.get("responsive_type"), layout.get("user_id"), layout.get("editable")) }}
    {% elif layout["type"] == "TABS" %}
        {{ display_tabs_layout(layout["header"], layout["lines"]) }}
    {% elif layout["type"] == "SPACER" %}
        <div><p style="margin-bottom:1cm;"></p></div>
          
    {% endif %}
{% endmacro %}

{% macro display_horizontal_layout(columns=[], containers = [], align = [], spacing = 0) %}
    TOCODE
{% endmacro %}

{% macro display_vertical_layout(columns=[], containers = [], align = [], spacing = 0, height = 0, background = none, user_id = none, style = none) %}
    <div class="row my-1 {{spacing}} align-items-center {% if background %}bg-{{background}}{% endif %} {% if style %}{{style}}{% endif %}" {% if user_id %} id="{{user_id}}"{% endif %} >
    {# For each columns #}
    {% for col in columns %}
        <div class="col-{{col}} text-{{align[loop.index0]}}">
        
        {# Display all the items in the containers one another #}
        {% for element in containers[loop.index0] %}
            {% if height %}
                <div style="height: {{ height * 50 }}px">
            {% endif %}
                {% if element["object"] == "item" %}
                    {{ disp_item.display_item(element) }}
                {% elif element["object"] == "layout" %}
                {#<div class="row">#}
                    {{ display_layout(element)}}
                {#</div>#}
                {% else %}
                    NOT SUPPORTED
                {% endif %}
            
            {% if height %}
                </div>
            {% endif %}
        {% endfor %}

        </div>
    {% endfor %}
    </div>

{% endmacro %}

{% macro display_table_layout(header=[], lines = [], responsive = None, responsive_type = None, user_id = none, editable = None) %}
    {# Generate unique table ID if editable and no user_id provided #}
    {% set table_id = user_id or (responsive_type ~ '_' ~ responsive) if responsive else ('editable_table_' ~ range(0, 999999) | random | string) %}
    
    <div class="row m-1" {% if user_id %} id="{{user_id}}"{% endif %}>
    
    {# Boutons d'édition en haut (si activé) #}
    {% if editable and editable.enabled and editable.button_position in ['top', 'both'] %}
        <div class="d-flex justify-content-end mb-2">
            <button type="button" class="btn btn-sm btn-success me-2" 
                    onclick="addTableRow('{{ table_id }}')">
                {{ editable.add_button_text or '➕ Add Row' }}
            </button>
            <button type="button" class="btn btn-sm btn-danger" 
                    onclick="removeTableRow('{{ table_id }}')">
                {{ editable.remove_button_text or '➖ Remove Row' }}
            </button>
        </div>
    {% endif %}
    
    <div class="table-responsive">
        <table class="table table-striped mb-0" 
                   {% if responsive %}
                        id="{{ responsive_type }}_{{ responsive }}"                       
                   {% elif editable and editable.enabled %}
                        id="{{ table_id }}"
                   {% endif %}
                   {% if editable and editable.enabled %}
                        data-editable="true"
                        data-input-prefix="{{ editable.input_prefix or '' }}"
                        data-min-rows="{{ editable.min_rows or 0 }}"
                        data-max-rows="{{ editable.max_rows or '' }}"
                   {% endif %}>
            <thead>
                <tr>
                    {% for head in header %}
                        <th>{{ head }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
            {% if lines %}
                {% for line in lines %}
                    <tr>
                    {% for item in line %}
                        <td>
                            {% for element in item %}
                                {% if element["object"] == "item" %}
                                    {{ disp_item.display_item(element) }}
                                {% elif element["object"] == "layout" %}
                                    {{ display_layout(element)}}
                                {% else %}
                                    NOT SUPPORTED
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endfor %}
                    </tr>
                {% endfor %}
            {% endif %}
            </tbody>

            </table>
        </div>
    
    {# Boutons d'édition en bas (si activé) #}
    {% if editable and editable.enabled and (not editable.button_position or editable.button_position in ['bottom', 'both']) %}
        <div class="d-flex justify-content-end mt-2">
            <button type="button" class="btn btn-sm btn-success me-2" 
                    onclick="addTableRow('{{ table_id }}')">
                {{ editable.add_button_text or '➕ Add Row' }}
            </button>
            <button type="button" class="btn btn-sm btn-danger" 
                    onclick="removeTableRow('{{ table_id }}')">
                {{ editable.remove_button_text or '➖ Remove Row' }}
            </button>
        </div>
    {% endif %}
    </div>
    
    {# Script JavaScript pour gérer l'édition #}
    {% if editable and editable.enabled %}
        <script>
        // Initialiser le registre des tables éditables si nécessaire
        if (!window.editableTables) {
            window.editableTables = {};
        }
        
        // Enregistrer cette table éditable
        window.editableTables['{{ table_id }}'] = {
            inputPrefix: '{{ editable.input_prefix or "" }}',
            minRows: {{ editable.min_rows or 0 }},
            maxRows: {{ editable.max_rows or 'null' }},
            columns: [
                {% for col_index in range(header|length) %}
                {
                    type: '{{ editable.input_types[col_index] if editable.input_types and col_index < editable.input_types|length else "text" }}',
                    placeholder: '{{ editable.placeholders[col_index] if editable.placeholders and col_index < editable.placeholders|length else "" }}'
                }{{ ',' if not loop.last else '' }}
                {% endfor %}
            ]
        };
        
        // Fonction globale pour ajouter une ligne
        if (!window.addTableRow) {
            window.addTableRow = function(tableId) {
                const config = window.editableTables[tableId];
                if (!config) {
                    console.error('Table config not found:', tableId);
                    return;
                }
                
                const table = document.getElementById(tableId);
                if (!table) {
                    console.error('Table element not found:', tableId);
                    return;
                }
                
                const tbody = table.querySelector('tbody');
                if (!tbody) {
                    console.error('Table tbody not found:', tableId);
                    return;
                }
                
                const currentRows = tbody.querySelectorAll('tr').length;
                if (config.maxRows && currentRows >= config.maxRows) {
                    alert('Maximum number of rows reached (' + config.maxRows + ')');
                    return;
                }
                
                const newRowIndex = currentRows + 1;
                const newRow = document.createElement('tr');
                
                config.columns.forEach((col, colIndex) => {
                    const cell = document.createElement('td');
                    const inputName = config.inputPrefix + '_col' + colIndex + '_' + newRowIndex;
                    cell.innerHTML = '<input type="' + col.type + '" ' +
                                     'name="' + inputName + '" ' +
                                     'class="form-control form-control-sm" ' +
                                     (col.placeholder ? 'placeholder="' + col.placeholder + '" ' : '') +
                                     'style="width: 100%;">';
                    newRow.appendChild(cell);
                });
                
                tbody.appendChild(newRow);
                
                const firstInput = newRow.querySelector('input, select');
                if (firstInput) firstInput.focus();
            };
        }
        
        // Fonction globale pour supprimer une ligne
        if (!window.removeTableRow) {
            window.removeTableRow = function(tableId) {
                const config = window.editableTables[tableId];
                if (!config) {
                    console.error('Table config not found:', tableId);
                    return;
                }
                
                const table = document.getElementById(tableId);
                if (!table) {
                    console.error('Table element not found:', tableId);
                    return;
                }
                
                const tbody = table.querySelector('tbody');
                if (!tbody) {
                    console.error('Table tbody not found:', tableId);
                    return;
                }
                
                const currentRows = tbody.querySelectorAll('tr');
                
                if (currentRows.length <= config.minRows) {
                    alert('Minimum number of rows reached (' + config.minRows + ')');
                    return;
                }
                
                if (currentRows.length === 0) {
                    alert('No rows to remove');
                    return;
                }
                
                const lastRow = currentRows[currentRows.length - 1];
                lastRow.remove();
            };
        }
        </script>
    {% endif %}
{% endmacro %}

{% macro display_tabs_layout(header=[], lines=[]) %}
    <ul class="nav nav-tabs" id="myTab" role="tablist">
    {% for head in header %}
    <li class="nav-item" role="presentation">
        <a class="nav-link {% if loop.first %}active{% endif %}" 
        id="tab{{ loop.index }}-tab" 
        data-bs-toggle="tab" 
        href="#tab{{ loop.index }}" 
        role="tab" 
        aria-controls="tab{{ loop.index }}" 
        aria-selected="{{ 'true' if loop.first else 'false' }}">
        {{ head }}
        </a>
    </li>
    {% endfor %}
    </ul>

    <div class="tab-content" id="myTabContent">
    {% for items in lines[0] %}
        <div class="tab-pane fade {% if loop.first %}show active{% endif %}" 
            id="tab{{ loop.index }}" 
            role="tabpanel" 
            aria-labelledby="tab{{ loop.index }}-tab">
            {% for element in items %}
                {% if element["object"] == "item" %}
                    {{ disp_item.display_item(element) }}
                {% elif element["object"] == "layout" %}
                    {{ display_layout(element) }}
                {% else %}
                    NOT SUPPORTED IN TABS for {{ element["object"] }}
                {% endif %}
            {% endfor %}
        </div>
    {% endfor %}
    </div>
{% endmacro %}
