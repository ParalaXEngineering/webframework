{% extends "base.j2" %}

{% block title %}Displayer Test Gallery{% endblock %}
{% block subtitle %}Auto-generated test components for visual inspection{% endblock %}

{% block styles %}
<!-- Vendor CSS for gallery components -->
<link rel="stylesheet" href="../../../webengine/assets/vendors/filepond/filepond.min.css">
<link rel="stylesheet" href="../../../webengine/assets/vendors/filepond-plugin-image-preview/filepond-plugin-image-preview.min.css">

<style>
/* Fix sidebar scrolling */
#sidebar .sidebar-wrapper {
    overflow-y: auto !important;
    max-height: 100vh;
}

/* Preview container styling */
#preview-container {
    min-height: 400px;
}

#content-display {
    padding: 20px;
    background: white;
    border-radius: 8px;
}
</style>
{% endblock %}

{% block main_page %}
<section class="section">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4 class="card-title mb-0">
                <i class="mdi mdi-eye"></i> Test Preview: <span id="current-file-title">Select a component</span>
            </h4>
            <div>
                <button class="btn btn-sm btn-outline-primary" onclick="openInNewTab()">
                    <i class="mdi mdi-open-in-new"></i> Open Full Page
                </button>
            </div>
        </div>
        <div class="card-body">
            <div id="content-display" style="display: none;">
                <!-- Test content will be injected here from embedded content_map -->
            </div>
        </div>
    </div>
</section>

<script>
// Content and filename mapping embedded from Python
const contentMap = {{ content_map | tojson }};
const filenameMap = {{ filename_map | tojson }};

let currentComponentName = null;

// Initialize vendor libraries for dynamically loaded content
function initializeVendorLibraries(container) {
    console.log('Gallery: Initializing vendor libraries');
    
    // Initialize FilePond if available
    if (typeof FilePond !== 'undefined') {
        // Register plugins
        if (typeof FilePondPluginImagePreview !== 'undefined' && typeof FilePondPluginFileValidateType !== 'undefined') {
            FilePond.registerPlugin(FilePondPluginImagePreview, FilePondPluginFileValidateType);
        }
        
        // Image preview filepond
        container.querySelectorAll(".image-preview-filepond").forEach(element => {
            if (!element.classList.contains('filepond--root')) {  // Avoid re-initializing
                FilePond.create(element, {
                    labelIdle: `Drag & Drop image <span class="filepond--label-action">Browse</span>`,
                    credits: null,
                    allowImagePreview: true,
                    allowImageFilter: false,
                    allowImageExifOrientation: false,
                    allowImageCrop: false,
                    acceptedFileTypes: ["image/png", "image/jpg", "image/jpeg"],
                    storeAsFile: true,
                });
                console.log('Gallery: Initialized FilePond image preview');
            }
        });
        
        // Basic filepond
        container.querySelectorAll(".basic-filepond").forEach(element => {
            if (!element.classList.contains('filepond--root')) {
                FilePond.create(element, {
                    credits: null,
                    storeAsFile: true,
                });
                console.log('Gallery: Initialized FilePond basic');
            }
        });
        
        // Folder filepond
        container.querySelectorAll(".folder-filepond").forEach(element => {
            if (!element.classList.contains('filepond--root')) {
                FilePond.create(element, {
                    credits: null,
                    storeAsFile: true,
                    allowMultiple: true,
                    allowDirectoriesOnly: false,
                });
                console.log('Gallery: Initialized FilePond folder');
            }
        });
    }
    
    // Initialize TinyMCE if available
    if (typeof tinymce !== 'undefined') {
        container.querySelectorAll(".tinymce-editor").forEach(element => {
            if (!element.classList.contains('tox-tinymce')) {  // Avoid re-initializing
                tinymce.init({
                    selector: '#' + element.id,
                    plugins: 'lists link image table code',
                    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | bullist numlist',
                    menubar: false,
                });
                console.log('Gallery: Initialized TinyMCE');
            }
        });
    }
}

// Load preview content directly (no iframe, no fetch - content is embedded!)
function loadPreview(componentName) {
    console.log('Gallery: loadPreview called with:', componentName);
    
    if (!componentName) {
        const hash = window.location.hash.substring(1);
        componentName = hash || null;
        console.log('Gallery: Extracted component from hash:', componentName);
    }
    
    if (componentName && contentMap[componentName]) {
        currentComponentName = componentName;
        const contentDisplay = document.getElementById('content-display');
        const currentFileTitle = document.getElementById('current-file-title');
        
        console.log('Gallery: Loading embedded content for:', componentName);
        
        // Inject the pre-extracted content
        contentDisplay.innerHTML = contentMap[componentName];
        
        // Execute any scripts in the injected content
        const scripts = contentDisplay.querySelectorAll('script');
        scripts.forEach(oldScript => {
            const newScript = document.createElement('script');
            // Copy attributes
            Array.from(oldScript.attributes).forEach(attr => {
                newScript.setAttribute(attr.name, attr.value);
            });
            // Copy content
            newScript.textContent = oldScript.textContent;
            // Replace old script with new one (this executes it)
            oldScript.parentNode.replaceChild(newScript, oldScript);
        });
        console.log('Gallery: Executed', scripts.length, 'scripts in injected content');
        
        // Manually initialize vendor libraries for injected content
        setTimeout(() => {
            initializeVendorLibraries(contentDisplay);
        }, 100); // Small delay to ensure scripts are loaded
        
        // Show content
        contentDisplay.style.display = 'block';
        
        // Update title
        currentFileTitle.textContent = componentName;
        
        // Update hash
        window.location.hash = componentName;
        console.log('Gallery: Content loaded successfully');
    } else {
        console.warn('Gallery: No content found for:', componentName);
    }
}

// Open current component's full HTML file in new tab
function openInNewTab() {
    if (currentComponentName && filenameMap[currentComponentName]) {
        window.open(filenameMap[currentComponentName], '_blank');
    }
}

// Override sidebar link behavior for gallery
document.addEventListener('DOMContentLoaded', function() {
    console.log('Gallery: DOM loaded, setting up sidebar navigation');
    console.log('Gallery: contentMap has', Object.keys(contentMap).length, 'components');
    
    // Add a small delay to ensure framework's sidebar JS is done
    setTimeout(function() {
        // Find all sidebar links
        const sidebarLinks = document.querySelectorAll('.sidebar-item a');
        console.log('Gallery: Found', sidebarLinks.length, 'sidebar links');
        
        sidebarLinks.forEach((link, index) => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Extract component name from link text
                const span = this.querySelector('span');
                if (!span) {
                    console.warn('Gallery: No span found in link', this);
                    return;
                }
                
                const componentName = span.textContent.trim();
                
                console.log('Gallery: Clicked', componentName);
                
                if (contentMap[componentName]) {
                    // Load preview using component name directly
                    loadPreview(componentName);
                    
                    // Update active state
                    document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                    this.closest('.sidebar-item').classList.add('active');
                } else {
                    console.error('Gallery: No content found for', componentName);
                }
            });
        });
        
        // Auto-load first item if no hash
        if (!window.location.hash) {
            const firstItem = document.querySelector('.sidebar-item a');
            if (firstItem) {
                console.log('Gallery: Auto-clicking first item');
                firstItem.click();
            }
        } else {
            // Load from hash
            console.log('Gallery: Loading from hash:', window.location.hash);
            loadPreview();
        }
    }, 100); // Small delay to let framework initialize
});

// Listen for hash changes
window.addEventListener('hashchange', () => loadPreview());
</script>

<!-- Vendor JavaScript for gallery components -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="../../../webengine/assets/vendors/filepond/filepond.min.js"></script>
<script src="../../../webengine/assets/vendors/filepond-plugin-file-validate-type/filepond-plugin-file-validate-type.min.js"></script>
<script src="../../../webengine/assets/vendors/filepond-plugin-image-preview/filepond-plugin-image-preview.min.js"></script>
<script src="../../../webengine/assets/vendors/tinymce/tinymce.min.js"></script>
<script src="../../../webengine/assets/vendors/fullcalendar/fullcalendar.min.js"></script>
<script src="../../../webengine/assets/js/filepond-init.js"></script>
<script src="../../../webengine/assets/js/tinymce-init.js"></script>

{% endblock %}
