"""
Conftest for the ParalaX Web Framework testing.

This is the main configuration file that sets up test execution order and
provides common configuration. Specific fixtures are defined in:
- tests/unit/conftest.py - for unit tests (no Flask)
- tests/integration/conftest.py - for integration tests (with Flask)

Test Organization:
tests/
├── conftest.py (this file - main configuration)
├── unit/ (pure logic tests, no Flask required)
│   ├── conftest.py
│   ├── test_settings.py
│   ├── test_scheduler.py
│   ├── test_threading.py
│   ├── test_table_modes.py
│   └── test_security.py
└── integration/ (end-to-end tests with Flask)
    ├── conftest.py
    ├── test_displayer.py
    ├── test_displayer_tabs_tables.py
    ├── test_resource_loading.py
    ├── test_auth_integration.py
    └── test_authorization_refactor.py

Test Execution Order:
- test_displayer.py runs first to generate HTML output files
- test_resource_loading.py runs second to verify resources in generated HTML
- All other tests run in default order
"""
from pathlib import Path
import sys
import os
import pytest

# Configure test execution order
def pytest_collection_modifyitems(config, items):
    """
    Modify test collection to enforce execution order.
    
    Ensures test_displayer.py runs before test_resource_loading.py because
    the latter validates HTML files generated by the former.
    """
    # Define the desired execution order
    order_map = {
        'test_displayer.py': 10,  # Generate HTML files first
        'test_resource_loading.py': 11,  # Then verify resources in HTML
        'test_displayer_tabs_tables.py': 12,  # Additional displayer tests
        'test_authorization_refactor.py': 15,  # Auth tests
        'test_auth_integration.py': 16,  # More auth tests
        'test_settings.py': 20,  # Settings tests (no dependencies)
        'test_scheduler.py': 30,  # Scheduler tests (no dependencies)
        'test_threading.py': 40,  # Threading tests
        'test_table_modes.py': 50,  # Table mode tests
        'test_security.py': 60,  # Security tests
    }
    
    def get_order_key(item):
        # Get the filename from the test item
        filename = item.fspath.basename
        # Get order priority (default to 999 for unknown files)
        file_priority = order_map.get(filename, 999)
        
        # Within each file, maintain original order by using item's line number
        line_number = item.location[1] if item.location else 0
        
        return (file_priority, line_number)
    
    # Sort items by the order key
    items.sort(key=get_order_key)

@pytest.fixture(scope="session", autouse=True)
def setup_environment():
    """Setup the test environment once for all tests in this session."""
    # Get paths
    test_dir = Path(__file__).parent
    framework_dir = test_dir.parent
    src_dir = framework_dir / 'src'
    
    # Add src to Python path
    if str(src_dir) not in sys.path:
        sys.path.insert(0, str(src_dir))
    
    # Change to framework directory for relative paths
    original_cwd = os.getcwd()
    os.chdir(framework_dir)
    
    yield
    
    # Cleanup: restore original directory
    os.chdir(original_cwd)
